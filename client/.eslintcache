[{"C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\index.js":"1","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\reportWebVitals.js":"2","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\components\\HeaderComponent.js":"3","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\uniqueId.js":"4","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\profileForm.js":"5","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\components\\FeedComponent.js":"6","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\ActionCreators.js":"7","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\ActionTypes.js":"8","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\firebase\\index.js":"9","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\configureStore.js":"10","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\userInfo.js":"11","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\lostPetForm.js":"12","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\components\\PublicProfile.js":"13","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\components\\SheltersComponent.js":"14","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\errorReducer.js":"15","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\authReducer.js":"16","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\components\\register.js":"17","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\utils\\setAuthToken.js":"18","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\post.js":"19","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\components\\MainComponent.js":"20","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\components\\LostpetsComponent.js":"21","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\components\\PetProfileComponent.js":"22","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\App.js":"23","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\components\\login.js":"24","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\petCard.js":"25","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\petForm.js":"26","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\postReducer.js":"27","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\userInfoDBReducer.js":"28"},{"size":640,"mtime":1609767643255,"results":"29","hashOfConfig":"30"},{"size":362,"mtime":1608153980176,"results":"31","hashOfConfig":"30"},{"size":17154,"mtime":1615902639995,"results":"32","hashOfConfig":"30"},{"size":287,"mtime":1608672902983,"results":"33","hashOfConfig":"30"},{"size":144,"mtime":1609274912556,"results":"34","hashOfConfig":"30"},{"size":17493,"mtime":1616529304464,"results":"35","hashOfConfig":"30"},{"size":4610,"mtime":1616612096124,"results":"36","hashOfConfig":"30"},{"size":519,"mtime":1616611490018,"results":"37","hashOfConfig":"30"},{"size":600,"mtime":1613758166614,"results":"38","hashOfConfig":"30"},{"size":1729,"mtime":1616599841914,"results":"39","hashOfConfig":"30"},{"size":272,"mtime":1608730788512,"results":"40","hashOfConfig":"30"},{"size":70,"mtime":1609345216689,"results":"41","hashOfConfig":"30"},{"size":15850,"mtime":1616619214638,"results":"42","hashOfConfig":"30"},{"size":454,"mtime":1609853654631,"results":"43","hashOfConfig":"30"},{"size":254,"mtime":1615410862637,"results":"44","hashOfConfig":"30"},{"size":626,"mtime":1616003295189,"results":"45","hashOfConfig":"30"},{"size":5484,"mtime":1615901692595,"results":"46","hashOfConfig":"30"},{"size":338,"mtime":1615218456090,"results":"47","hashOfConfig":"30"},{"size":315,"mtime":1616181426111,"results":"48","hashOfConfig":"30"},{"size":6310,"mtime":1616618327798,"results":"49","hashOfConfig":"30"},{"size":9096,"mtime":1615902252126,"results":"50","hashOfConfig":"30"},{"size":24533,"mtime":1616619191714,"results":"51","hashOfConfig":"30"},{"size":1191,"mtime":1615574240529,"results":"52","hashOfConfig":"30"},{"size":3883,"mtime":1615901847609,"results":"53","hashOfConfig":"30"},{"size":290,"mtime":1608936039638,"results":"54","hashOfConfig":"30"},{"size":145,"mtime":1609852026604,"results":"55","hashOfConfig":"30"},{"size":697,"mtime":1616531555577,"results":"56","hashOfConfig":"30"},{"size":770,"mtime":1616616477402,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"tehkno",{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"60"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"60"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"97"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"104","messages":"105","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"60"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"60"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\index.js",[],["124","125"],"C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\reportWebVitals.js",[],["126","127"],"C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\components\\HeaderComponent.js",["128","129","130","131","132","133","134"],"import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link, NavLink as RRNavLink } from \"react-router-dom\";\r\nimport uuid from \"react-uuid\";\r\nimport {\r\n  Nav,\r\n  NavbarBrand,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  Label,\r\n  NavItem,\r\n  TabContent,\r\n  TabPane,\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavLink,\r\n  UncontrolledDropdown,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  Button,\r\n  UncontrolledTooltip,\r\n  Row,\r\n  Col,\r\n} from \"reactstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport classnames from \"classnames\";\r\nimport { Control, Form, Errors } from \"react-redux-form\";\r\nimport Register from \"./register\"\r\nimport Login from \"./login\"\r\nimport { logoutUser } from \"../redux/ActionCreators\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass Header extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      collapsed: true,\r\n      isNavOpen: false,\r\n      isModalOpen: false,\r\n      isPetIdModalOpen: false,\r\n      activeTab: \"1\",\r\n    };\r\n  }\r\n\r\n  // handleLogin = (values) => {\r\n  //   if (values.email) {\r\n  //     alert(\"Logged In\");\r\n  //   } else {\r\n  //     alert(\"Please Register First\");\r\n  //   }\r\n  //   this.toggleModal();\r\n  // };\r\n\r\n  // handleRegister = (values) => {\r\n  //   this.props.addUserInfo(\r\n  //     this.props.uniqueId.uniqueId,\r\n  //     \"localImageUrl\",\r\n  //     values,\r\n  //     true\r\n  //   );\r\n  //   this.toggleModal();\r\n  //   this.toggleModalPetId();\r\n  //   this.generateId();\r\n  // };\r\n\r\n  \r\n  toggleModal = () => {\r\n\r\n    this.setState({\r\n      isModalOpen: !this.state.isModalOpen,\r\n    });\r\n  };\r\n  generateId = () => {\r\n    this.props.addUniqueId(uuid());\r\n  };\r\n  toggleModalPetId = () => {\r\n    this.setState(\r\n      {\r\n        isPetIdModalOpen: true,\r\n      },\r\n      () => {\r\n        setTimeout(this.handleClose, 3000);\r\n      }\r\n    );\r\n  };\r\n\r\n  handleClose = () => {\r\n    this.setState({\r\n      isPetIdModalOpen: false,\r\n    });\r\n  };\r\n\r\n  toggleNav = () => {\r\n    this.setState({\r\n      collapsed: !this.state.collapsed,\r\n    });\r\n  };\r\n\r\n  toggleTab = (tab) => {\r\n    if (this.state.activeTab !== tab) {\r\n      this.setState({ activeTab: tab });\r\n    }\r\n  };\r\n  onLogoutClick = () => {\r\n   this.props.logoutUser();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Navbar\r\n          id=\"navbar\"\r\n          className=\"site-header \"\r\n          expand=\"md\"\r\n          style={{ boxShadow: \"0 4px 4px 0 rgba(0, 0, 0, 0.5)\" }}\r\n          light\r\n        >\r\n          <NavbarBrand tag={RRNavLink} to=\"/petbook\" className=\"ml-4\" style={{ color: \"white\" }}>\r\n            <h5\r\n              style={{\r\n                fontSize: \"40px\",\r\n                textShadow: \"1px 1px 3px #363636\",\r\n                fontFamily: \"Fredoka One\",\r\n                fontWeight: \"200\",\r\n              }}\r\n            >\r\n              PetB\r\n              <img\r\n                src=\"/petbook/assets/pawprint2.png\"\r\n                style={{ width: \"40px\", margin: \"3px\" }}\r\n              ></img>\r\n              k\r\n            </h5>\r\n          </NavbarBrand>\r\n          <NavbarToggler onClick={this.toggleNav} className=\"mr-2 hamburger\" />\r\n          <Collapse isOpen={!this.state.collapsed} navbar>\r\n            <Nav navbar className=\"mx-auto\">\r\n              <NavItem className=\"mr-5 ml-4\">\r\n                <NavLink\r\n                  tag={RRNavLink}\r\n                 \r\n                  style={{\r\n                    fontWeight: \"bold\",\r\n                    color: \"white\",\r\n                  }}\r\n                  to=\"/LostPets\"\r\n                  onClick={!this.state.collapsed ? this.toggleNav : \"\"}\r\n                  activeStyle={{\r\n                    fontWeight: \"900\",\r\n                    color: \"white\",\r\n                    textDecoration: \"underline\",\r\n                    \r\n                  }}\r\n                >\r\n                  <img\r\n                    src=\"/petbook/assets/lostFound.png\"\r\n                    alt=\"lostPets\"\r\n                    style={{\r\n                      width: \"30px\",\r\n                      height: \"30px\",\r\n                      position: \"relative\",\r\n                      margin: \"3px\",\r\n                      display: \"inline-block\" \r\n                    }}\r\n                    className=\"align-bottom\"\r\n                  />\r\n\r\n                  <span\r\n                    style={{ display: \"inline\" }}\r\n                    className=\"text-nowrap align-bottom\"\r\n                  >\r\n                    Lost & Found\r\n                  </span>\r\n                </NavLink>\r\n              </NavItem>\r\n              <NavItem className=\"mr-5 ml-4\">\r\n                <NavLink\r\n                  tag={RRNavLink}\r\n                  onClick={!this.state.collapsed ? this.toggleNav : \"\"}\r\n                  to=\"/Feed\"\r\n                  style={{\r\n                    fontWeight: \"bold\",\r\n                    color: \"white\",\r\n                  }}\r\n                  activeStyle={{\r\n                    fontWeight: \"900\",\r\n                    color: \"white\",\r\n                    textDecoration: \"underline\",\r\n                  }}\r\n                \r\n                >\r\n                  <img\r\n                    src=\"/petbook/assets/home4.png\"\r\n                    alt=\"feed\"\r\n                    style={{\r\n                      width: \"30px\",\r\n                      height: \"30px\",\r\n                      position: \"relative\",\r\n                      margin: \"3px\",\r\n                      display: \"inline-block\" \r\n                    }}\r\n                    className=\"align-bottom\"\r\n                  />\r\n                  <span\r\n                    style={{ display: \"inline\" }}\r\n                    className=\"text-nowrap align-bottom\"\r\n                  >\r\n                    Home\r\n                  </span>\r\n                </NavLink>\r\n              </NavItem>\r\n            </Nav>\r\n            <UncontrolledDropdown inNavbar>\r\n            <DropdownToggle nav caret style={{ color: \"white\" }} className=\"dropdownTogglePosition\">\r\n              Profile\r\n              {typeof this.props.userInfo.userInfo.profileInfo ===\r\n                \"undefined\" ||\r\n              this.props.userInfo.userInfo.userPick === \"localImageUrl\" ||\r\n              this.props.userInfo.userInfo.userPick === \"\" ? (\r\n                <img\r\n                  id=\"proPic\"\r\n                  className=\"profileImg rounded-circle ml-3\"\r\n                  src=\"/petbook/assets/default.png\"\r\n                  alt=\"profileImg\"\r\n                  style={{ width: \"40px\" }}\r\n                />\r\n              ) : (\r\n                <img\r\n                  id=\"proPic\"\r\n                  className=\"profileImg rounded-circle ml-3\"\r\n                  src={this.props.userInfo.userInfo.userPick}\r\n                  alt=\"profileImg\"\r\n                  style={{ width: \"40px\" }}\r\n                />\r\n              )}\r\n            </DropdownToggle >\r\n              <DropdownMenu className=\"dropdownPosition\">\r\n                <NavItem className=\"\">\r\n                  {this.props.auth.isAuthenticated ? (\r\n                    <Link style={{ color: \"black\" }} to=\"/PetProfile\">\r\n                      <DropdownItem id=\"profileSettings\">\r\n                        {typeof this.props.userInfo.userInfo.profileInfo ===\r\n                          \"undefined\" ||\r\n                        this.props.userInfo.userInfo.userPick ===\r\n                          \"localImageUrl\" ||\r\n                        this.props.userInfo.userInfo.userPick === \"\" ? (\r\n                          <img\r\n                            id=\"proPic\"\r\n                            className=\"profileImg rounded-circle mr-1\"\r\n                            src=\"/petbook/assets/default.png\" \r\n                            alt=\"profileImg\"\r\n                            style={{\r\n                              width: \"40px\",\r\n                              objectFit: \"cover\",\r\n                              objectPosition: \"50% 50%\",\r\n                             \r\n                            }}\r\n                          />\r\n                        ) : (\r\n                          <img\r\n                            id=\"proPic\"\r\n                            className=\"profileImg rounded-circle mr-2\"\r\n                            src={this.props.userInfo.userInfo.userPick}\r\n                            alt=\"profileImg\"\r\n                            style={{\r\n                              width: \"40px\",\r\n                              objectFit: \"cover\",\r\n                              objectPosition: \"50% 50%\",\r\n                            }}\r\n                          />\r\n                        )}\r\n                        Your Profile\r\n                      </DropdownItem>\r\n                      <UncontrolledTooltip\r\n                        placement=\"left\"\r\n                        target=\"profileSettings\"\r\n                      >\r\n                        Profile and Settings\r\n                      </UncontrolledTooltip>\r\n                    </Link>\r\n                  ) : (\r\n                    <Link style={{ color: \"black\" }} to=\"/\">\r\n                      <DropdownItem id=\"profileSettings\" className=\"text-center m-0\">\r\n                        <img\r\n                          className=\"profileImg rounded-circle mr-1\"\r\n                          src=\"/petbook/assets/default.png\"\r\n                          alt=\"profileImg\"\r\n                          style={{\r\n                            width: \"40px\",\r\n                            objectFit: \"cover\",\r\n                            objectPosition: \"50% 50%\",\r\n                          }}\r\n                        />\r\n                        Your Profile\r\n                      </DropdownItem>\r\n                      <UncontrolledTooltip\r\n                        placement=\"left\"\r\n                        target=\"profileSettings\"\r\n                      >\r\n                        Profile and Settings\r\n                      </UncontrolledTooltip>\r\n                    </Link>\r\n                  )}\r\n                </NavItem>\r\n                <DropdownItem divider />\r\n                <DropdownItem>Settings</DropdownItem>\r\n                <DropdownItem>Help</DropdownItem>\r\n                <DropdownItem>\r\n                  <span className=\"navbar-text ml-2\">\r\n                    <Button color=\"primary\" onClick={this.toggleModal}>\r\n                      <i className=\"fa fa-sign-in fa-lg\" /> Login\r\n                    </Button>\r\n                  </span>\r\n                  <span className=\"navbar-text ml-2\">\r\n                    <Button color=\"primary\" onClick={this.onLogoutClick}>\r\n                      <i className=\"fa fa-sign-in fa-lg\" /> Logout\r\n                    </Button>\r\n                  </span>\r\n                </DropdownItem>\r\n              </DropdownMenu>\r\n              \r\n          </UncontrolledDropdown>\r\n          </Collapse>\r\n          \r\n          \r\n        \r\n        </Navbar>\r\n\r\n        <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>\r\n          <ModalHeader\r\n            toggle={this.toggleModal}\r\n            style={{\r\n              backgroundColor: \"#1b8eb1\",\r\n              color: \"white\",\r\n              textShadow: \"1px 1px 3px #363636\",\r\n              fontFamily: \"Nunit, sans-serif\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n          >\r\n            Login\r\n          </ModalHeader>\r\n          <ModalBody>\r\n            <Nav tabs>\r\n              <NavItem>\r\n                <NavLink\r\n                  className={classnames({\r\n                    active: this.state.activeTab === \"1\",\r\n                  })}\r\n                  onClick={() => {\r\n                    this.toggleTab(\"1\");\r\n                  }}\r\n                  href=\"#\"\r\n                >\r\n                  Log In\r\n                </NavLink>\r\n              </NavItem>\r\n              <NavItem>\r\n                <NavLink\r\n                  className={classnames({\r\n                    active: this.state.activeTab === \"2\",\r\n                  })}\r\n                  onClick={() => {\r\n                    this.toggleTab(\"2\");\r\n                  }}\r\n                  href=\"#\"\r\n                >\r\n                  Register\r\n                </NavLink>\r\n              </NavItem>\r\n            </Nav>\r\n            <TabContent activeTab={this.state.activeTab}>\r\n              <TabPane tabId=\"1\">\r\n              <Login toggleModal={this.toggleModal} addUserInfo={this.props.addUserInfo}/>\r\n                {/* <Form\r\n                  model=\"profileForm\"\r\n                  onSubmit={(values) => this.handleLogin(values)}\r\n                  className=\"mt-2\"\r\n                >\r\n                  <Row className=\"form-group \">\r\n                    <Col>\r\n                      <Label htmlFor=\"email\" className=\"ml-3\">\r\n                        Email:\r\n                      </Label>\r\n\r\n                      <Col md={10}>\r\n                        <Control.text\r\n                          model=\".email\"\r\n                          id=\"email\"\r\n                          name=\"email\"\r\n                          placeholder=\"email\"\r\n                          className=\"form-control\"\r\n                        />\r\n                      </Col>\r\n                    </Col>\r\n                  </Row>\r\n\r\n                  <Row className=\"form-group \">\r\n                    <Col>\r\n                      <Label htmlFor=\"password\" className=\"ml-3\">\r\n                        Password:\r\n                      </Label>\r\n\r\n                      <Col md={10}>\r\n                        <Control.text\r\n                          model=\".password\"\r\n                          id=\"password\"\r\n                          name=\"password\"\r\n                          placeholder=\"password\"\r\n                          className=\"form-control\"\r\n                        />\r\n                      </Col>\r\n                    </Col>\r\n                  </Row>\r\n\r\n                  <Button type=\"submit\" value=\"submit\" color=\"primary\">\r\n                    Login\r\n                  </Button>\r\n                </Form> */}\r\n              </TabPane>\r\n              <TabPane tabId=\"2\">\r\n                <Register toggleModal={this.toggleModal} addUserInfo={this.props.addUserInfo}/>\r\n                {/* <Form\r\n                  model=\"profileForm\"\r\n                  onSubmit={(values) => this.handleRegister(values)}\r\n                  className=\"mt-2\"\r\n                >\r\n                  <Row className=\"form-group \">\r\n                    <Col>\r\n                      <Label htmlFor=\"profileName\" className=\"ml-3\">\r\n                        Profile Name:\r\n                      </Label>\r\n\r\n                      <Col md={10}>\r\n                        <Control.text\r\n                          model=\".profileName\"\r\n                          id=\"profileName\"\r\n                          name=\"profileName\"\r\n                          placeholder=\"profileName\"\r\n                          className=\"form-control\"\r\n                        />\r\n                      </Col>\r\n                    </Col>\r\n                  </Row>\r\n                  <Row className=\"form-group \">\r\n                    <Col>\r\n                      <Label htmlFor=\"email\" className=\"ml-3\">\r\n                        Email:\r\n                      </Label>\r\n\r\n                      <Col md={10}>\r\n                        <Control.text\r\n                          model=\".email\"\r\n                          id=\"email\"\r\n                          name=\"email\"\r\n                          placeholder=\"email\"\r\n                          className=\"form-control\"\r\n                        />\r\n                      </Col>\r\n                    </Col>\r\n                  </Row>\r\n                  <Row className=\"form-group \">\r\n                    <Col>\r\n                      <Label htmlFor=\"password\" className=\"ml-3\">\r\n                        Password:\r\n                      </Label>\r\n\r\n                      <Col md={10}>\r\n                        <Control.text\r\n                          model=\".password\"\r\n                          id=\"password\"\r\n                          name=\"password\"\r\n                          placeholder=\"password\"\r\n                          className=\"form-control\"\r\n                        />\r\n                      </Col>\r\n                    </Col>\r\n                  </Row>\r\n                  <Button type=\"submit\" value=\"submit\" color=\"primary\">\r\n                    Register\r\n                  </Button>\r\n                </Form> */}\r\n              </TabPane>\r\n            </TabContent>\r\n          </ModalBody>\r\n        </Modal>\r\n        {/* <Modal\r\n          isOpen={this.state.isPetIdModalOpen}\r\n          toggle={this.toggleModalPetId}\r\n        >\r\n          <ModalHeader\r\n            toggle={this.toggleModalPetId}\r\n            style={{\r\n              backgroundColor: \"#1b8eb1\",\r\n              color: \"white\",\r\n              textShadow: \"1px 1px 3px #363636\",\r\n            }}\r\n          >\r\n            Owner Id\r\n          </ModalHeader>\r\n          <ModalBody>{this.props.uniqueId.uniqueId}</ModalBody>\r\n        </Modal> */}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\nHeader.propTypes = {\r\n  logoutUser: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default connect(\r\n \"\",\r\n  { logoutUser }\r\n)(Header);\r\n","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\uniqueId.js",[],"C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\profileForm.js",[],"C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\components\\FeedComponent.js",["135","136","137"],"import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport {\r\n  FormGroup,\r\n  Button,\r\n  ModalHeader,\r\n  Modal,\r\n  ModalBody,\r\n  Label,\r\n  Card,\r\n  CardBody,\r\n  CardTitle,\r\n  CardText,\r\n  CardImg,\r\n  TabPane,\r\n  TabContent,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n} from \"reactstrap\";\r\nimport { Control, LocalForm } from \"react-redux-form\";\r\nimport { storage } from \"../firebase\";\r\nimport classnames from \"classnames\";\r\nimport uuid from \"react-uuid\";\r\nimport Register from \"./register\";\r\nimport Login from \"./login\";\r\n\r\nclass PostForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isModalOpen: false,\r\n      touched: {\r\n        author: false,\r\n      },\r\n      feedPicPost: null,\r\n      feedPicPostURL: null,\r\n      progressState: 0,\r\n      text: null,\r\n    };\r\n  }\r\n\r\n  toggleModal = () => {\r\n    this.setState({\r\n      isModalOpen: !this.state.isModalOpen,\r\n    });\r\n  };\r\n\r\n  handleSubmit = (values) => {\r\n    //alert(this.props.postreducer.body)\r\n    this.toggleModal();\r\n    console.log(this.props.userInfo.userInfo.length)\r\n    this.props.userPost(this.props.userInfo.userInfo.length === 0  ?\" \":this.props.userInfo.userInfo.info.PicPostURL, values.text);\r\n    this.props.postComment(values.text, this.state.feedPicPostURL);\r\n \r\n     \r\n    setTimeout(() => this.props.rerenderParentCallback(), 1000)\r\n  };\r\n\r\n\r\n  handleChange = (e) => {\r\n    if (e.target.files[0]) {\r\n      this.setState(\r\n        { feedPicPost: e.target.files[0] },\r\n        (this.handleUpload = () => {\r\n          const uploadTask = storage\r\n            .ref(`images/${this.state.feedPicPost.name}`)\r\n            .put(this.state.feedPicPost);\r\n          uploadTask.on(\r\n            \"state_changed\",\r\n            (snapshot) => {\r\n              const progress = Math.round(\r\n                (snapshot.bytesTransferred / snapshot.totalBytes) * 100\r\n              );\r\n              this.setState({ progressState: progress });\r\n            },\r\n            (error) => {\r\n              console.log(error);\r\n            },\r\n            () => {\r\n              storage\r\n                .ref(\"images\")\r\n                .child(this.state.feedPicPost.name)\r\n                .getDownloadURL()\r\n                .then((url) => {\r\n                  console.log(url);\r\n                  this.props.addUserInfo({PicPostURL: url})\r\n                  this.setState({ feedPicPostURL: url });\r\n                });\r\n            }\r\n          );\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"m-2\">\r\n        <Modal isOpen={this.state.isCropOpen} toggle={this.toggleModalCropOpen}>\r\n          <ModalHeader\r\n            toggle={this.toggleModalCropOpen}\r\n            style={{\r\n              backgroundColor: \"#1b8eb1\",\r\n              color: \"white\",\r\n              textShadow: \"1px 1px 3px #363636\",\r\n            }}\r\n          >\r\n            Crop\r\n          </ModalHeader>\r\n          <ModalBody\r\n            style={{ width: \"100%\", height: \"400px\", objectFit: \"none\" }}\r\n          ></ModalBody>\r\n        </Modal>\r\n        <Button\r\n          type=\"submit\"\r\n          color=\"primary\"\r\n          outline\r\n          className=\"fa-sm\"\r\n          onClick={this.toggleModal}\r\n        >\r\n          <i className=\"fa fa-pencil \" /> Post\r\n        </Button>\r\n\r\n        <div className=\"rectangle rounded\" onClick={this.toggleModal}></div>\r\n\r\n        <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>\r\n          <ModalHeader\r\n            toggle={this.toggleModal}\r\n            style={{\r\n              backgroundColor: \"#1b8eb1\",\r\n              color: \"white\",\r\n              textShadow: \"1px 1px 3px #363636\",\r\n            }}\r\n          >\r\n            Submit Comment\r\n          </ModalHeader>\r\n          <ModalBody>\r\n            <LocalForm onSubmit={(values) => this.handleSubmit(values)}>\r\n              <div className=\"form-group\">\r\n                <Label htmlFor=\"text\">Comment</Label>\r\n                <Control.textarea\r\n                  model=\".text\"\r\n                  id=\"text\"\r\n                  name=\"text\"\r\n                  rows=\"6\"\r\n                  className=\"form-control\"\r\n                  defaultValue=\"\"\r\n                  style={{\r\n                    fontFamily: \"Nunito\",\r\n                    fontWeight: \"400\",\r\n                  }}\r\n                />\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <FormGroup>\r\n                  <Control.file\r\n                    model=\".file\"\r\n                    id=\"file\"\r\n                    name=\"file\"\r\n                    placeholder=\"Image\"\r\n                    className=\"form-control\"\r\n                    onChange={this.handleChange}\r\n                  />\r\n                </FormGroup>\r\n                <Button type=\"submit\" value=\"submit\" color=\"primary\">\r\n                  Submit\r\n                </Button>\r\n              </div>\r\n            </LocalForm>\r\n          </ModalBody>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst apiPser = axios.create({\r\n  baseURL: \"http://localhost:5000/api/users/\",\r\n});\r\n\r\nconst apiPosts = axios.create({\r\n  baseURL: \"http://localhost:5000/api/posts/\",\r\n});\r\n\r\nclass Feed extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      mainProfileName: \"Keith\",\r\n      postText: \"\",\r\n      postImage: \"\",\r\n      activeTab: \"2\",\r\n      data: [],\r\n      posts: [],\r\n      error: \"\",\r\n    };\r\n\r\n    // api.get('/',{\r\n    //   headers:{\r\n    //     \"Authorization\":localStorage.getItem(\"jwtToken\"),\r\n    //     \"Content-Type\":\"application/json\",\r\n    //     'Access-Control-Allow-Origin':'*'\r\n    //   }\r\n    // })\r\n    // .then(response => {\r\n    //   response.statusCode = 200;\r\n    //   response.setHeader(\"Content-Type\", \"application/json\",\"Access-Control-Allow-Origin\", \"*\");\r\n    //  console.log(response.data)\r\n    // });\r\n  }\r\n\r\n  handleInputChange = (event) => {\r\n    const target = event.target;\r\n    const name = target.name;\r\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\r\n\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    alert(\"Current state is: \" + JSON.stringify(this.state));\r\n    this.setState({\r\n      postText: \"\",\r\n      postImage: \"\",\r\n    }\r\n    );\r\n\r\n  };\r\n  handleLogin = (values) => {\r\n    if (values.email) {\r\n      alert(\"Logged In\");\r\n    } else {\r\n      alert(\"Please Register First\");\r\n    }\r\n    this.toggleModal();\r\n  };\r\n\r\n  handleRegister = (values) => {\r\n    this.props.addUserInfo(\r\n      this.props.uniqueId.uniqueId,\r\n      \"localImageUrl\",\r\n      values,\r\n      true\r\n    );\r\n    this.toggleModal();\r\n    this.generateId();\r\n  };\r\n\r\n  generateId = () => {\r\n    this.props.addUniqueId(uuid());\r\n  };\r\n\r\n  toggleModal = () => {\r\n    this.setState({\r\n      isModalOpen: !this.state.isModalOpen,\r\n    });\r\n  };\r\n\r\n  componentDidMount = () => {\r\n    if (!this.props.auth.isAuthenticated) {\r\n      this.setState({\r\n        isModalOpen: !this.state.isModalOpen,\r\n      });\r\n    }\r\n\r\n    apiPosts\r\n      .get(\"/allpost\")\r\n      //.then((response) => response.json())\r\n      .then((response) => {\r\n        //console.log(response.data)\r\n        this.setState({ posts: response.data }\r\n        //  , () => console.log(this.state.posts)\r\n        );\r\n      })\r\n      .catch((err) => {\r\n        this.setState({ error: err });\r\n      });\r\n    if (this.state.error || !Array.isArray(this.state.posts)) {\r\n      return console.log(\"This is not an array\");\r\n    }\r\n  };\r\n\r\n  // componentDidUpdate(prevProps) {\r\n  //   console.log(prevProps.post.post)\r\n  //   console.log(this.state.posts.posts)\r\n  //   if (prevProps.post.post !== [] || prevProps.post.post !== this.state.posts.posts ) {\r\n  //     console.log(\"hi\")\r\n  //   }\r\n  // }\r\n  rerenderParentCallback = () => {\r\n    apiPosts\r\n    .get(\"/allpost\")\r\n    //.then((response) => response.json())\r\n    .then((response) => {\r\n      console.log(response.data)\r\n      this.setState({ posts: response.data }\r\n      //  , () => console.log(this.state.posts)\r\n      );\r\n    })\r\n    .catch((err) => {\r\n      this.setState({ error: err });\r\n    });\r\n  if (this.state.error || !Array.isArray(this.state.posts)) {\r\n    return console.log(\"This is not an array \");\r\n  }\r\n  }\r\n\r\n  toggleTab = (tab) => {\r\n    if (this.state.activeTab !== tab) {\r\n      this.setState({ activeTab: tab });\r\n    }\r\n  };\r\n  render() {\r\n\r\n    \r\n    console.log(`Parent rendered.`);\r\n    //console.log(props.posts.posts)\r\n    //return   props.postreducer.post.filter(id =>id.postedBy._id === props.auth.user.id).map((post, index) => {\r\n    return (\r\n      <div className=\"container \">\r\n        <div\r\n          id=\"postHead\"\r\n          className=\"row row-content\"\r\n          style={{ position: \"relative\" }}\r\n        >\r\n          <div className=\"col-12 mx-auto p-2 \">\r\n            \r\n            <Card className=\"m-2 lostPetCard\">\r\n              <div class=\"card-horizontal\">\r\n                {typeof this.props.userInfo.userInfo.profileInfo ===\r\n                  \"undefined\" ||\r\n                this.props.userInfo.userInfo.userPick === \"localImageUrl\" ||\r\n                this.props.userInfo.userInfo.userPick === \"\" ? (\r\n                  <CardImg\r\n                    id=\"music\"\r\n                    className=\"profileImg m-2\"\r\n                    src=\"/petbook/assets/default.png\"\r\n                    alt=\"profileImg\"\r\n                    style={{ width: \"40px\" }}\r\n                  />\r\n                ) : (\r\n                  <CardImg\r\n                    id=\"music\"\r\n                    className=\"profileImg m-2\"\r\n                    src={this.props.userInfo.userInfo.userPick}\r\n                    alt=\"profileImg\"\r\n                    style={{ width: \"40px\" }}\r\n                  />\r\n                )}\r\n\r\n                <CardTitle\r\n                  style={{ fontFamily: \"Fredoka One\", fontWeight: \"200\" }}\r\n                  className=\"mt-3\"\r\n                >\r\n                  {\" \"}\r\n                  {!this.props.auth.isAuthenticated\r\n                    ? \"Not Logged In\"\r\n                    : this.props.auth.user.name}\r\n                </CardTitle>\r\n              </div>\r\n              <div className=\"border\">\r\n                <PostForm\r\n                  postComment={this.props.postComment}\r\n                  userPost={this.props.userPost}\r\n                  postreducer={this.props.postreducer}\r\n                  addUserInfo={this.props.addUserInfo}\r\n                  userInfo={this.props.userInfo}\r\n                  rerenderParentCallback={this.rerenderParentCallback}\r\n                />\r\n              </div>\r\n            </Card>\r\n          </div>\r\n        </div>\r\n        <div className=\"\">\r\n          {typeof this.state.posts.posts === \"undefined\" ? (\r\n            <div></div>\r\n          ) : (\r\n            this.state.posts.posts.map((post, index) => {\r\n              return (\r\n                <div className=\"container\" key={index}>\r\n                  <div className=\"row row-content\">\r\n                    <div className=\"col-12 mx-auto p-2\">\r\n                      <Card\r\n                        className=\"m-2 lostPetCard\"\r\n                        style={{\r\n                          width: \"auto\",\r\n                          height: \"auto\",\r\n                          boxShadow: \"0 4px 4px 0 rgba(0, 0, 0, 0.5)\",\r\n                        }}\r\n                      >\r\n                        <div class=\"card-horizontal\">\r\n                          {typeof this.props.userInfo.userInfo.profileInfo ===\r\n                            \"undefined\" ||\r\n                          this.props.userInfo.userInfo.userPick ===\r\n                            \"localImageUrl\" ||\r\n                          this.props.userInfo.userInfo.userPick === \"\" ? (\r\n                            <CardImg\r\n                              id=\"music\"\r\n                              className=\"profileImg mr-2 ml-2 mt-2\"\r\n                              src=\"/petbook/assets/default.png\"\r\n                              alt=\"profileImg\"\r\n                              style={{\r\n                                width: \"60px\",\r\n                                objectFit: \"cover\",\r\n                                objectPosition: \"50% 50%\",\r\n                              }}\r\n                            />\r\n                          ) : (\r\n                            <CardImg\r\n                              id=\"music\"\r\n                              className=\"profileImg mr-2 ml-2 mt-2\"\r\n                              src={this.props.userInfo.userInfo.userPick}\r\n                              alt=\"profileImg\"\r\n                              style={{\r\n                                width: \"60px\",\r\n                                objectFit: \"cover\",\r\n                                objectPosition: \"50% 50%\",\r\n                              }}\r\n                            />\r\n                          )}\r\n\r\n                          <CardTitle\r\n                            style={{\r\n                              fontFamily: \"Fredoka One\",\r\n                              fontWeight: \"200\",\r\n                            }}\r\n                            className=\"mt-4\"\r\n                          >\r\n                            {\" \"}\r\n                            {post.postedBy.map((item, i) => {\r\n                              return (\r\n                                <div style={{ color: \"black\" }} key={i}>\r\n                                  {item.name}\r\n                                </div>\r\n                              );\r\n                            })}\r\n                          </CardTitle>\r\n                        </div>\r\n                        <CardBody\r\n                          className=\"mx-auto\"\r\n                          style={{ width: \"100%\", height: \"auto\" }}\r\n                        >\r\n                          <CardText\r\n                            className=\"text-center text-break text-wrap \"\r\n                            style={{\r\n                              fontSize: \"calc(.5em + 1vw)\",\r\n                              height: \"auto!important\",\r\n                              fontFamily: \"Nunito\",\r\n                              fontWeight: \"400\",\r\n                            }}\r\n                          >\r\n                            {post.body}\r\n                          </CardText>\r\n                          {post.postImage === null ? (\r\n                            <div></div>\r\n                          ) : (\r\n                            <CardImg\r\n                              className=\"img-fluid mx-auto\"\r\n                              style={{\r\n                                width: \"70vh\",\r\n                                height: \"auto\",\r\n                                objectFit: \"contain\",\r\n                                objectPosition: \"50% 50%\",\r\n                                display: \"block\",\r\n                                verticalAlign: \"top\",\r\n                              }}\r\n                              src={post.pic}\r\n                            />\r\n                          )}\r\n                        </CardBody>\r\n                      </Card>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })\r\n          )}\r\n\r\n          {/* <Post\r\n            post={this.props.post}\r\n            userInfo={this.props.userInfo}\r\n            userPick={this.props.userInfo.userInfo.userPick}\r\n            auth={this.props.auth}\r\n            userPost={this.props.userPost}\r\n            postreducer={this.props.postreducer}\r\n            posts={this.state.posts}\r\n          />  */}\r\n        </div>\r\n        <Modal\r\n          backdrop=\"static\"\r\n          isOpen={this.state.isModalOpen}\r\n          toggle={this.toggleModal}\r\n        >\r\n          <ModalHeader\r\n            toggle={this.toggleModal}\r\n            style={{\r\n              backgroundColor: \"#1b8eb1\",\r\n              color: \"white\",\r\n              textShadow: \"1px 1px 3px #363636 \",\r\n            }}\r\n          >\r\n            Login\r\n          </ModalHeader>\r\n          <ModalBody>\r\n            <Nav tabs>\r\n              <NavItem>\r\n                <NavLink\r\n                  className={classnames({\r\n                    active: this.state.activeTab === \"1\",\r\n                  })}\r\n                  onClick={() => {\r\n                    this.toggleTab(\"1\");\r\n                  }}\r\n                  href=\"#\"\r\n                >\r\n                  Log In\r\n                </NavLink>\r\n              </NavItem>\r\n              <NavItem>\r\n                <NavLink\r\n                  className={classnames({\r\n                    active: this.state.activeTab === \"2\",\r\n                  })}\r\n                  onClick={() => {\r\n                    this.toggleTab(\"2\");\r\n                  }}\r\n                  href=\"#\"\r\n                >\r\n                  Register\r\n                </NavLink>\r\n              </NavItem>\r\n            </Nav>\r\n            <TabContent activeTab={this.state.activeTab}>\r\n              <TabPane tabId=\"1\">\r\n                <Login\r\n                  toggleModal={this.toggleModal}\r\n                  addUserInfo={this.props.addUserInfo}\r\n                />\r\n              </TabPane>\r\n              <TabPane tabId=\"2\">\r\n                <Register\r\n                  toggleModal={this.toggleModal}\r\n                  addUserInfo={this.props.addUserInfo}\r\n                />\r\n              </TabPane>\r\n            </TabContent>\r\n          </ModalBody>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Feed;\r\n","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\ActionCreators.js",[],"C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\ActionTypes.js",[],"C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\firebase\\index.js",[],"C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\configureStore.js",["138"],"C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\userInfo.js",[],"C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\lostPetForm.js",[],"C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\components\\PublicProfile.js",["139"],"C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\components\\SheltersComponent.js",[],"C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\errorReducer.js",[],"C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\authReducer.js",[],"C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\components\\register.js",["140","141","142","143","144","145","146","147"],"import React, { Component } from \"react\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { registerUser } from \"../redux/ActionCreators\";\r\nimport classnames from \"classnames\";\r\nimport { Control, Form } from \"react-redux-form\";\r\nimport uuid from \"react-uuid\";\r\nimport {\r\n    Button,\r\n    Label,\r\n    Row,\r\n    Col,\r\n  } from \"reactstrap\";\r\nclass Register extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n        name : \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n      password2: \"\",\r\n      errors: {}\r\n    };\r\n  }\r\n  generateId = () => {\r\n    this.props.addUniqueId(uuid());\r\n  };\r\n  componentDidMount() {\r\n    // If logged in and user navigates to Register page, should redirect them to dashboard\r\n    if (this.props.auth.isAuthenticated) {\r\n      this.props.history.push(\"/PetProfile\");\r\n      this.props.toggleModal()\r\n      alert(\"Already Loged In\")\r\n    }\r\n  }\r\ncomponentWillReceiveProps(nextProps) {\r\n    if (nextProps.errors) {\r\n      this.setState({\r\n        errors: nextProps.errors\r\n      });\r\n    }\r\n\r\n  }\r\nonChange = e => {\r\n    this.setState({ [e.target.id]: e.target.value });\r\n  };\r\nonSubmit = (e) => {\r\n    //e.preventDefault();\r\n     if( this.state.name !== \"\"){\r\n        this.setState({\r\n            errors: this.props.errors.name = null,\r\n          });\r\n    }\r\n     if(this.state.email != \"\"){\r\n        this.setState({\r\n\r\n            errors: this.props.errors.email = null,\r\n          });\r\n    }\r\n   if(this.state.password != \"\"){\r\n        this.setState({\r\n\r\n            errors: this.props.errors.password = null,\r\n          });\r\n    }\r\n   if(this.state.password2 != \"\"){\r\n        this.setState({\r\n            errors: this.props.errors.password2 = null,\r\n          });\r\n    } \r\nif (this.props.errors.name === null && this.props.errors.email === null &&this.props.errors.password === null && this.props.errors.password2 === null){\r\n    this.props.toggleModal()\r\n}\r\n    this.props.addUserInfo(\r\n  {profileName:this.state.name}\r\n      )\r\n\r\nconst newUser = {\r\n    name: this.state.name,\r\n      email: this.state.email,\r\n      password: this.state.password,\r\n      password2: this.state.password2\r\n    };\r\nthis.props.registerUser(newUser, this.props.history); \r\n  };\r\nrender() {\r\n    const { errors } = this.state;\r\nreturn (\r\n\r\n  <Form\r\n    model=\"profileForm\"\r\n    onSubmit={(values) => this.onSubmit(values)}\r\n    className=\"mt-2\"\r\n  >\r\n    <Row className=\"form-group \">\r\n      <Col>\r\n        <Label htmlFor=\"name\" className=\"ml-3\">\r\n          Profile Name:\r\n        </Label>\r\n        <Col md={10}>\r\n          <Control.text\r\n            model=\".name\"\r\n            id=\"name\"\r\n            name=\"name\"\r\n            placeholder=\"name\"\r\n            onChange={this.onChange}\r\n            value={this.state.name}\r\n            className={classnames(\"form-control\", {\r\n                invalid: errors.name\r\n               })}\r\n          />\r\n          <span className=\"text-danger m-1\">{errors.name}</span>\r\n        </Col>\r\n      </Col>\r\n    </Row>\r\n    <Row className=\"form-group \">\r\n      <Col>\r\n        <Label htmlFor=\"email\" className=\"ml-3\">\r\n          Email:\r\n        </Label>\r\n\r\n        <Col md={10}>\r\n          <Control.text\r\n            model=\".email\"\r\n            id=\"email\"\r\n            name=\"email\"\r\n            placeholder=\"email\"\r\n         \r\n            onChange={this.onChange}\r\n            value={this.state.email}\r\n            className={classnames(\"form-control\", {\r\n                invalid: errors.email\r\n               })}\r\n\r\n          />\r\n    <span className=\"text-danger m-1\">{errors.email}</span>\r\n        </Col>\r\n      </Col>\r\n    </Row>\r\n    <Row className=\"form-group \">\r\n      <Col>\r\n        <Label htmlFor=\"password\" className=\"ml-3\">\r\n          Password:\r\n        </Label>\r\n\r\n        <Col md={10}>\r\n          <Control.text\r\n            model=\".password\"\r\n            id=\"password\"\r\n            name=\"password\"\r\n            placeholder=\"password\"\r\n\r\n            onChange={this.onChange}\r\n            value={this.state.password}\r\n            error={errors.password}\r\n            className={classnames(\"form-control\", {\r\n                invalid: errors.password\r\n               })}\r\n          />\r\n          <span className=\"text-danger m-1\">{errors.password}</span>\r\n        </Col>\r\n      </Col>\r\n    </Row>\r\n    <Row className=\"form-group \">\r\n      <Col>\r\n        <Label htmlFor=\"password2\" className=\"ml-3\">\r\n          Comfirm Password:\r\n        </Label>\r\n\r\n        <Col md={10}>\r\n          <Control.text\r\n            model=\".password\"\r\n            id=\"password2\"\r\n            name=\"password2\"\r\n            placeholder=\"password2\"\r\n\r\n            onChange={this.onChange}\r\n            value={this.state.password2}\r\n            error={errors.password2}\r\n            className={classnames(\"form-control\", {\r\n            invalid: errors.password2\r\n           })}\r\n          />\r\n          <span className=\"text-danger m-1\">{errors.password2}</span>\r\n        </Col>\r\n      </Col>\r\n    </Row>\r\n\r\n    <Button type=\"submit\" value=\"submit\" color=\"primary\">\r\n      Register\r\n    </Button>\r\n  </Form>\r\n\r\n    );\r\n  }\r\n}\r\nRegister.propTypes = {\r\n  registerUser: PropTypes.func.isRequired,\r\n  auth: PropTypes.object.isRequired,\r\n  errors: PropTypes.object.isRequired\r\n};\r\nconst mapStateToProps = state => ({\r\n  auth: state.auth,\r\n  errors: state.errors\r\n});\r\nexport default connect(\r\n  mapStateToProps,\r\n  { registerUser }\r\n)(withRouter(Register));",["148","149"],"C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\utils\\setAuthToken.js",[],"C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\post.js",[],"C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\components\\MainComponent.js",["150","151"],"C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\components\\LostpetsComponent.js",["152","153"],"import React, { Component } from \"react\";\r\nimport { Control, Form, Errors } from \"react-redux-form\";\r\nimport {\r\n  Button,\r\n  Label,\r\n  Row,\r\n  Col,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  Card,\r\n  CardText,\r\n  CardBody,\r\n  CardTitle,\r\n  Container,\r\n  TabContent,\r\n  TabPane,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n} from \"reactstrap\";\r\nimport classnames from \"classnames\";\r\nimport uuid from \"react-uuid\";\r\nimport * as emailjs from \"emailjs-com\";\r\nimport Register from \"./register\"\r\nimport Login from \"./login\"\r\n\r\nclass Lostpet extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isEmailSentModalOpen: false,\r\n      isModalOpen: false,\r\n      activeTab: \"2\",\r\n      profileNameHolder: null,\r\n    };\r\n  }\r\n\r\n  handleSubmit = (values) => {\r\n    if (\r\n      this.props.petcard.petcard[0].petId === values.petId\r\n      // +\r\n      //   this.props.userInfo.userInfo.userId ===\r\n      // values.petId\r\n    ) {\r\n      let templateParams = {\r\n        from: \"PetProfile\",\r\n        to: this.props.userInfo.userInfo.profileInfo.email,\r\n        subject: \"PetFound\",\r\n        html: `Your Pet Was Found Please call ${values.phoneNumber} to contact the person who found them.`,\r\n      };\r\n      emailjs.send(\r\n        \"service_6u1iluk\",\r\n        \"template_h94ookz\",\r\n        templateParams,\r\n        \"user_HqDyxgYEp2AfHpa0ga1B3\"\r\n      );\r\n      this.toggleModalEmailSent();\r\n    } else {\r\n      this.toggleModalEmailNotSent();\r\n    }\r\n\r\n    this.props.resetLostPetForm();\r\n  };\r\n\r\n  toggleModalEmailSent = () => {\r\n    this.setState(\r\n      {\r\n        isEmailSentModalOpen: true,\r\n      },\r\n      () => {\r\n        setTimeout(this.handleClose, 3000);\r\n      }\r\n    );\r\n  };\r\n\r\n  handleClose = () => {\r\n    this.setState({\r\n      isEmailSentModalOpen: false,\r\n    });\r\n  };\r\n\r\n  toggleModalEmailNotSent = () => {\r\n    this.setState(\r\n      {\r\n        isEmailNotSentModalOpen: true,\r\n      },\r\n      () => {\r\n        setTimeout(this.handleClose2, 3000);\r\n      }\r\n    );\r\n  };\r\n\r\n  handleClose2 = () => {\r\n    this.setState({\r\n      isEmailNotSentModalOpen: false,\r\n    });\r\n  };\r\n\r\n  handleLogin = (values) => {\r\n    if (values.email) {\r\n      alert(\"Logged In\");\r\n    } else {\r\n      alert(\"Please Register First\");\r\n    }\r\n    this.toggleModal();\r\n  };\r\n\r\n  handleRegister = (values) => {\r\n    this.props.addUserInfo(\r\n      this.props.uniqueId.uniqueId,\r\n      \"localImageUrl\",\r\n      values,\r\n      true\r\n    );\r\n    this.toggleModal();\r\n    this.generateId();\r\n  };\r\n\r\n  generateId = () => {\r\n    this.props.addUniqueId(uuid());\r\n  };\r\n\r\n  toggleModal = () => {\r\n    this.setState({\r\n      isModalOpen: !this.state.isModalOpen,\r\n    });\r\n  };\r\n\r\n  componentDidMount = () => {\r\n    if(!this.props.auth.isAuthenticated){\r\n         this.setState({\r\n        isModalOpen: !this.state.isModalOpen,\r\n      });\r\n    }\r\n    // if (typeof this.props.userInfo.userInfo.profileInfo === \"undefined\") {\r\n    //   this.setState({\r\n    //     isModalOpen: !this.state.isModalOpen,\r\n    //   });\r\n    // }\r\n  };\r\n  toggleTab = (tab) => {\r\n    if (this.state.activeTab !== tab) {\r\n      this.setState({ activeTab: tab });\r\n    }\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h4 className=\"text-center m-3\" style={{ fontFamily: \"Nunito\",\r\n                    fontWeight: \"700\",}}>Lost Pet Submission  </h4>\r\n        <Container>\r\n          <Row>\r\n            <Col>\r\n              <Form\r\n                model=\"lostPetForm\"\r\n                onSubmit={(values) => this.handleSubmit(values)}\r\n                className=\"mx-auto\"\r\n              >\r\n                <Row className=\"form-group\">\r\n                  <Label htmlFor=\"petId\" md={2}>\r\n                   Lost Pet ID:\r\n                  </Label>\r\n                  <Col md={8}>\r\n                    <Control.text\r\n                      model=\".petId\"\r\n                      id=\"petId\"\r\n                      name=\"petId\"\r\n                      placeholder=\"Enter Lost Pet ID\"\r\n                      className=\"form-control\"\r\n                      validators={{}}\r\n                    />\r\n                    <Errors\r\n                      className=\"text-danger\"\r\n                      model=\".petId\"\r\n                      show=\"touched\"\r\n                      component=\"div\"\r\n                      messages={{}}\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n                <Row className=\"form-group\">\r\n                  <Label htmlFor=\"phoneNumber\" md={2}>\r\n                    Phone Number:\r\n                  </Label>\r\n                  <Col md={8}>\r\n                    <Control.text\r\n                      model=\".phoneNumber\"\r\n                      id=\"phoneNumber\"\r\n                      name=\"phoneNumber\"\r\n                      placeholder=\"Phone Number\"\r\n                      className=\"form-control\"\r\n                      validators={{}}\r\n                    />\r\n                    <Errors\r\n                      className=\"text-danger\"\r\n                      model=\".phoneNumber\"\r\n                      show=\"touched\"\r\n                      component=\"div\"\r\n                    />\r\n                  </Col>\r\n                </Row>\r\n                <Row className=\"form-group\">\r\n                  <Col md={{ size: 10, offset: 2 }}>\r\n                    <Button type=\"submit\" value=\"submit\" color=\"primary\">\r\n                      Submit Lost Pet\r\n                    </Button>\r\n                  </Col>\r\n                </Row>\r\n              </Form>\r\n            </Col>\r\n          </Row>\r\n\r\n          <Row>\r\n            <Col>\r\n              <Card className=\"m-2 lostPetCard\">\r\n                <CardBody>\r\n                  <CardTitle>What Happens When Your Pet Is Lost?</CardTitle>\r\n                  <CardText>\r\n                    When you sign your pet up they will have a unique ID number.\r\n                    Your pets identiy chip will have that unique ID number in it\r\n                    available by NFC. When someone submits a lost ID the ID will\r\n                    be matched to your profile and an email will be sent out to\r\n                    you with the persons phone number who found your pet.\r\n                  </CardText>\r\n                </CardBody>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n\r\n        <Modal\r\n          backdrop=\"static\"\r\n          isOpen={this.state.isModalOpen}\r\n          toggle={this.toggleModal}\r\n        >\r\n          <ModalHeader\r\n            toggle={this.toggleModal}\r\n            style={{\r\n              backgroundColor: \"#1b8eb1\",\r\n              color: \"white\",\r\n              textShadow: \"1px 1px 3px #363636 \",\r\n            }}\r\n          >\r\n            Login\r\n          </ModalHeader>\r\n          <ModalBody>\r\n            <Nav tabs>\r\n              <NavItem>\r\n                <NavLink\r\n                  className={classnames({\r\n                    active: this.state.activeTab === \"1\",\r\n                  })}\r\n                  onClick={() => {\r\n                    this.toggleTab(\"1\");\r\n                  }}\r\n                  href=\"#\"\r\n                >\r\n                  Log In\r\n                </NavLink>\r\n              </NavItem>\r\n              <NavItem>\r\n                <NavLink\r\n                  className={classnames({\r\n                    active: this.state.activeTab === \"2\",\r\n                  })}\r\n                  onClick={() => {\r\n                    this.toggleTab(\"2\");\r\n                  }}\r\n                  href=\"#\"\r\n                >\r\n                  Register\r\n                </NavLink>\r\n              </NavItem>\r\n            </Nav>\r\n            <TabContent activeTab={this.state.activeTab}>\r\n              <TabPane tabId=\"1\">\r\n              <Login toggleModal={this.toggleModal} addUserInfo={this.props.addUserInfo}/>\r\n              </TabPane>\r\n              <TabPane tabId=\"2\">\r\n             \r\n              <Register toggleModal={this.toggleModal} addUserInfo={this.props.addUserInfo}/>\r\n              </TabPane>\r\n            </TabContent>\r\n          </ModalBody>\r\n        </Modal>\r\n\r\n        <Modal\r\n          isOpen={this.state.isEmailSentModalOpen}\r\n          toggle={this.toggleModalEmailSent}\r\n        >\r\n          <ModalHeader\r\n            toggle={this.toggleModalEmailSent}\r\n            style={{\r\n              backgroundColor: \"#1b8eb1\",\r\n              color: \"white\",\r\n              textShadow: \"1px 1px 3px #363636\",\r\n            }}\r\n          >\r\n            Notification\r\n          </ModalHeader>\r\n          <ModalBody>Email was sent to the owner.</ModalBody>\r\n        </Modal>\r\n\r\n        <Modal\r\n          isOpen={this.state.isEmailNotSentModalOpen}\r\n          toggle={this.toggleModalEmailNotSent}\r\n        >\r\n          <ModalHeader\r\n            toggle={this.toggleModalEmailNotSent}\r\n            style={{\r\n              backgroundColor: \"#1b8eb1\",\r\n              color: \"white\",\r\n              textShadow: \"1px 1px 3px #363636\",\r\n            }}\r\n          >\r\n            Notification\r\n          </ModalHeader>\r\n          <ModalBody>Pet Id does not match!</ModalBody>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Lostpet;\r\n","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\components\\PetProfileComponent.js",["154","155","156","157","158","159","160","161","162","163","164","165","166"],"C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\App.js",[],["167","168"],"C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\components\\login.js",["169","170","171","172"],"import React, { Component } from \"react\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { loginUser } from \"../redux/ActionCreators\";\r\nimport classnames from \"classnames\";\r\nimport { Control, Form } from \"react-redux-form\";\r\nimport {\r\n    Button,\r\n    Label,\r\n    Row,\r\n    Col,\r\n  } from \"reactstrap\";\r\nclass Login extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      email: \"\",\r\n      password: \"\",\r\n      errors: {}\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    //If logged in and user navigates to Login page, should redirect them to dashboard\r\n    // if (this.props.auth.isAuthenticated) {\r\n    //   this.props.history.push(\"/petbook\");\r\n    //   this.props.toggleModal()\r\n    //   alert(\"Already Loged In\")\r\n    // }\r\n  }\r\ncomponentWillReceiveProps(nextProps) {\r\n    if (nextProps.auth.isAuthenticated) {\r\n      //this.props.history.push(\"/Feed\"); // push user to dashboard when they login\r\n      this.props.toggleModal()\r\n    }\r\nif (nextProps.errors) {\r\n      this.setState({\r\n        errors: nextProps.errors\r\n      });\r\n    }\r\n  }\r\nonChange = e => {\r\n    this.setState({ [e.target.id]: e.target.value });\r\n  };\r\nonSubmit = e => {\r\n    //e.preventDefault();\r\n  \r\n  //    if(this.state.email != \"\"){\r\n  //       this.setState({\r\n\r\n  //           errors: this.props.errors.email = null\r\n  //         });\r\n  //   }\r\n  //  if(this.state.password != \"\"){\r\n  //       this.setState({\r\n\r\n  //           errors: this.props.errors.password = null,\r\n  //         });\r\n  //   }\r\n// if (this.props.auth.isAuthenticated === true){\r\n//   this.props.toggleModal()\r\n// }\r\n\r\nconst userData = {\r\n      email: this.state.email,\r\n      password: this.state.password\r\n    };\r\nthis.props.loginUser(userData); // since we handle the redirect within our component, we don't need to pass in this.props.history as a parameter\r\n  };\r\nrender() {\r\n    const { errors } = this.state;\r\nreturn (\r\n\r\n    <Form\r\n    model=\"profileForm\"\r\n    onSubmit={(values) => this.onSubmit(values)}\r\n    className=\"mt-2\"\r\n  >\r\n   \r\n    <Row className=\"form-group \">\r\n      <Col>\r\n        <Label htmlFor=\"email\" className=\"ml-3\">\r\n          Email:\r\n        </Label>\r\n\r\n        <Col md={10}>\r\n          <Control.text\r\n            model=\".email\"\r\n            id=\"email\"\r\n            name=\"email\"\r\n            placeholder=\"email\"\r\n         \r\n            onChange={this.onChange}\r\n            value={this.state.email}\r\n            className={classnames(\"form-control\", {\r\n              invalid: errors.email\r\n               })}\r\n\r\n          />\r\n    <span className=\"text-danger m-1\">{errors.email}</span>\r\n        </Col>\r\n      </Col>\r\n    </Row>\r\n    <Row className=\"form-group \">\r\n      <Col>\r\n        <Label htmlFor=\"password\" className=\"ml-3\">\r\n          Password:\r\n        </Label>\r\n\r\n        <Col md={10}>\r\n          <Control.text\r\n            model=\".password\"\r\n            id=\"password\"\r\n            name=\"password\"\r\n            placeholder=\"password\"\r\n\r\n            onChange={this.onChange}\r\n            value={this.state.password}\r\n            error={errors.password}\r\n            className={classnames(\"form-control\", {\r\n              invalid: errors.password || errors.passwordincorrect\r\n               })}\r\n          />\r\n          <span className=\"text-danger m-1\">{errors.password}\r\n                   {errors.passwordincorrect}</span>\r\n        </Col>\r\n      </Col>\r\n    </Row>\r\n       <Button type=\"submit\" value=\"submit\" color=\"primary\">\r\n      Login\r\n    </Button>\r\n  </Form>\r\n    );\r\n  }\r\n}\r\nLogin.propTypes = {\r\n  loginUser: PropTypes.func.isRequired,\r\n  auth: PropTypes.object.isRequired,\r\n  errors: PropTypes.object.isRequired\r\n};\r\nconst mapStateToProps = state => ({\r\n  auth: state.auth,\r\n  errors: state.errors\r\n});\r\nexport default connect(\r\n  mapStateToProps,\r\n  { loginUser }\r\n)(Login);","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\petCard.js",[],"C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\petForm.js",[],"C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\postReducer.js",["173","174"],"import {\r\n    ADD_USER_POST\r\n  } from \"./ActionTypes\";\r\n  const isEmpty = require(\"is-empty\");\r\n  const initialState = {\r\n    title: \"\",\r\n    body: \"\",\r\n    loading: false\r\n  };\r\n  export const postReducer = (state = { post: [] }, action)=> {\r\n    switch (action.type) {\r\n        case ADD_USER_POST:\r\n            return {\r\n              ...state,\r\n              post:state.post.reverse().concat(action.payload.data.post).reverse()\r\n             // title: action.payload.data.post.title,\r\n            //  body: action.payload.data.post.body\r\n              // post:state.post.reverse().concat(action.payload).reverse()\r\n            };\r\n          default:\r\n            return state;      \r\n    }\r\n  }","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\userInfoDBReducer.js",["175"],{"ruleId":"176","replacedBy":"177"},{"ruleId":"178","replacedBy":"179"},{"ruleId":"176","replacedBy":"180"},{"ruleId":"178","replacedBy":"181"},{"ruleId":"182","severity":1,"message":"183","line":11,"column":3,"nodeType":"184","messageId":"185","endLine":11,"endColumn":8},{"ruleId":"182","severity":1,"message":"186","line":25,"column":3,"nodeType":"184","messageId":"185","endLine":25,"endColumn":6},{"ruleId":"182","severity":1,"message":"187","line":26,"column":3,"nodeType":"184","messageId":"185","endLine":26,"endColumn":6},{"ruleId":"182","severity":1,"message":"188","line":30,"column":10,"nodeType":"184","messageId":"185","endLine":30,"endColumn":17},{"ruleId":"182","severity":1,"message":"189","line":30,"column":19,"nodeType":"184","messageId":"185","endLine":30,"endColumn":23},{"ruleId":"182","severity":1,"message":"190","line":30,"column":25,"nodeType":"184","messageId":"185","endLine":30,"endColumn":31},{"ruleId":"191","severity":1,"message":"192","line":131,"column":15,"nodeType":"193","endLine":134,"endColumn":16},{"ruleId":"194","severity":1,"message":"195","line":142,"column":17,"nodeType":"193","endLine":153,"endColumn":19},{"ruleId":"194","severity":1,"message":"196","line":157,"column":19,"nodeType":"193","endLine":164,"endColumn":21},{"ruleId":"182","severity":1,"message":"197","line":178,"column":7,"nodeType":"184","messageId":"185","endLine":178,"endColumn":14},{"ruleId":"182","severity":1,"message":"198","line":15,"column":7,"nodeType":"184","messageId":"185","endLine":15,"endColumn":19},{"ruleId":"199","severity":1,"message":"200","line":305,"column":13,"nodeType":"193","endLine":310,"endColumn":14},{"ruleId":"182","severity":1,"message":"201","line":2,"column":10,"nodeType":"184","messageId":"185","endLine":2,"endColumn":14},{"ruleId":"202","severity":1,"message":"203","line":55,"column":26,"nodeType":"204","messageId":"205","endLine":55,"endColumn":28},{"ruleId":"202","severity":1,"message":"203","line":61,"column":27,"nodeType":"204","messageId":"205","endLine":61,"endColumn":29},{"ruleId":"202","severity":1,"message":"203","line":67,"column":28,"nodeType":"204","messageId":"205","endLine":67,"endColumn":30},{"ruleId":"194","severity":1,"message":"206","line":102,"column":11,"nodeType":"193","endLine":112,"endColumn":13},{"ruleId":"194","severity":1,"message":"206","line":124,"column":11,"nodeType":"193","endLine":136,"endColumn":13},{"ruleId":"194","severity":1,"message":"206","line":148,"column":11,"nodeType":"193","endLine":160,"endColumn":13},{"ruleId":"194","severity":1,"message":"206","line":172,"column":11,"nodeType":"193","endLine":184,"endColumn":13},{"ruleId":"176","replacedBy":"207"},{"ruleId":"178","replacedBy":"208"},{"ruleId":"182","severity":1,"message":"209","line":7,"column":3,"nodeType":"184","messageId":"185","endLine":7,"endColumn":16},{"ruleId":"210","severity":1,"message":"211","line":88,"column":3,"nodeType":"212","messageId":"213","endLine":90,"endColumn":4},{"ruleId":"194","severity":1,"message":"206","line":165,"column":21,"nodeType":"193","endLine":172,"endColumn":23},{"ruleId":"194","severity":1,"message":"206","line":187,"column":21,"nodeType":"193","endLine":194,"endColumn":23},{"ruleId":"194","severity":1,"message":"206","line":310,"column":19,"nodeType":"193","endLine":317,"endColumn":21},{"ruleId":"194","severity":1,"message":"196","line":332,"column":19,"nodeType":"193","endLine":340,"endColumn":21},{"ruleId":"194","severity":1,"message":"206","line":354,"column":19,"nodeType":"193","endLine":361,"endColumn":21},{"ruleId":"194","severity":1,"message":"206","line":376,"column":19,"nodeType":"193","endLine":383,"endColumn":21},{"ruleId":"194","severity":1,"message":"206","line":398,"column":19,"nodeType":"193","endLine":405,"endColumn":21},{"ruleId":"194","severity":1,"message":"206","line":420,"column":19,"nodeType":"193","endLine":427,"endColumn":21},{"ruleId":"194","severity":1,"message":"195","line":441,"column":19,"nodeType":"193","endLine":449,"endColumn":21},{"ruleId":"194","severity":1,"message":"196","line":606,"column":15,"nodeType":"193","endLine":614,"endColumn":17},{"ruleId":"194","severity":1,"message":"206","line":628,"column":15,"nodeType":"193","endLine":639,"endColumn":17},{"ruleId":"194","severity":1,"message":"206","line":653,"column":15,"nodeType":"193","endLine":660,"endColumn":17},{"ruleId":"194","severity":1,"message":"206","line":675,"column":15,"nodeType":"193","endLine":682,"endColumn":17},{"ruleId":"194","severity":1,"message":"206","line":696,"column":15,"nodeType":"193","endLine":707,"endColumn":17},{"ruleId":"194","severity":1,"message":"195","line":721,"column":15,"nodeType":"193","endLine":729,"endColumn":17},{"ruleId":"176","replacedBy":"214"},{"ruleId":"178","replacedBy":"215"},{"ruleId":"182","severity":1,"message":"201","line":2,"column":10,"nodeType":"184","messageId":"185","endLine":2,"endColumn":14},{"ruleId":"182","severity":1,"message":"216","line":2,"column":16,"nodeType":"184","messageId":"185","endLine":2,"endColumn":26},{"ruleId":"194","severity":1,"message":"206","line":87,"column":11,"nodeType":"193","endLine":99,"endColumn":13},{"ruleId":"194","severity":1,"message":"206","line":111,"column":11,"nodeType":"193","endLine":123,"endColumn":13},{"ruleId":"182","severity":1,"message":"217","line":4,"column":9,"nodeType":"184","messageId":"185","endLine":4,"endColumn":16},{"ruleId":"182","severity":1,"message":"198","line":5,"column":9,"nodeType":"184","messageId":"185","endLine":5,"endColumn":21},{"ruleId":"182","severity":1,"message":"217","line":6,"column":9,"nodeType":"184","messageId":"185","endLine":6,"endColumn":16},"no-native-reassign",["218"],"no-negated-in-lhs",["219"],["218"],["219"],"no-unused-vars","'Label' is defined but never used.","Identifier","unusedVar","'Row' is defined but never used.","'Col' is defined but never used.","'Control' is defined but never used.","'Form' is defined but never used.","'Errors' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react/jsx-pascal-case","Imported JSX component textarea must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component file must be in PascalCase or SCREAMING_SNAKE_CASE","'apiPser' is assigned a value but never used.","'initialState' is assigned a value but never used.","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","'Link' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Imported JSX component text must be in PascalCase or SCREAMING_SNAKE_CASE",["218"],["219"],"'BrowserRouter' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor",["218"],["219"],"'withRouter' is defined but never used.","'isEmpty' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]