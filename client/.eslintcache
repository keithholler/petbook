[{"C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\index.js":"1","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\reportWebVitals.js":"2","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\components\\HeaderComponent.js":"3","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\uniqueId.js":"4","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\profileForm.js":"5","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\components\\FeedComponent.js":"6","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\ActionCreators.js":"7","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\ActionTypes.js":"8","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\firebase\\index.js":"9","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\configureStore.js":"10","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\userInfo.js":"11","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\lostPetForm.js":"12","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\components\\PublicProfile.js":"13","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\components\\SheltersComponent.js":"14","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\errorReducer.js":"15","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\authReducer.js":"16","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\components\\register.js":"17","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\utils\\setAuthToken.js":"18","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\post.js":"19","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\components\\MainComponent.js":"20","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\components\\LostpetsComponent.js":"21","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\components\\PetProfileComponent.js":"22","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\App.js":"23","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\components\\login.js":"24","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\petCard.js":"25","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\petForm.js":"26","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\postReducer.js":"27","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\userInfoDBReducer.js":"28","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\petReducer.js":"29"},{"size":640,"mtime":1609767643255,"results":"30","hashOfConfig":"31"},{"size":362,"mtime":1608153980176,"results":"32","hashOfConfig":"31"},{"size":17217,"mtime":1617026318593,"results":"33","hashOfConfig":"31"},{"size":287,"mtime":1608672902983,"results":"34","hashOfConfig":"31"},{"size":144,"mtime":1609274912556,"results":"35","hashOfConfig":"31"},{"size":18036,"mtime":1617025514256,"results":"36","hashOfConfig":"31"},{"size":6321,"mtime":1617044682770,"results":"37","hashOfConfig":"31"},{"size":687,"mtime":1617037370041,"results":"38","hashOfConfig":"31"},{"size":600,"mtime":1613758166614,"results":"39","hashOfConfig":"31"},{"size":1360,"mtime":1617037644225,"results":"40","hashOfConfig":"31"},{"size":272,"mtime":1608730788512,"results":"41","hashOfConfig":"31"},{"size":70,"mtime":1609345216689,"results":"42","hashOfConfig":"31"},{"size":15053,"mtime":1617047068968,"results":"43","hashOfConfig":"31"},{"size":454,"mtime":1609853654631,"results":"44","hashOfConfig":"31"},{"size":254,"mtime":1615410862637,"results":"45","hashOfConfig":"31"},{"size":626,"mtime":1616003295189,"results":"46","hashOfConfig":"31"},{"size":5500,"mtime":1617025668999,"results":"47","hashOfConfig":"31"},{"size":338,"mtime":1615218456090,"results":"48","hashOfConfig":"31"},{"size":315,"mtime":1616181426111,"results":"49","hashOfConfig":"31"},{"size":9079,"mtime":1617046498439,"results":"50","hashOfConfig":"31"},{"size":10284,"mtime":1617051928276,"results":"51","hashOfConfig":"31"},{"size":24929,"mtime":1617046307984,"results":"52","hashOfConfig":"31"},{"size":1192,"mtime":1616792224101,"results":"53","hashOfConfig":"31"},{"size":3883,"mtime":1615901847609,"results":"54","hashOfConfig":"31"},{"size":290,"mtime":1608936039638,"results":"55","hashOfConfig":"31"},{"size":145,"mtime":1609852026604,"results":"56","hashOfConfig":"31"},{"size":1007,"mtime":1616695895110,"results":"57","hashOfConfig":"31"},{"size":770,"mtime":1616616477402,"results":"58","hashOfConfig":"31"},{"size":746,"mtime":1617046221309,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"tehkno",{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"69"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"62"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"69"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"109","messages":"110","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"118"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"69"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"69"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\index.js",[],["131","132"],"C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\reportWebVitals.js",[],["133","134"],"C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\components\\HeaderComponent.js",["135","136","137","138","139","140","141"],"import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link, NavLink as RRNavLink } from \"react-router-dom\";\r\nimport uuid from \"react-uuid\";\r\nimport {\r\n  Nav,\r\n  NavbarBrand,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  Label,\r\n  NavItem,\r\n  TabContent,\r\n  TabPane,\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavLink,\r\n  UncontrolledDropdown,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  Button,\r\n  UncontrolledTooltip,\r\n  Row,\r\n  Col,\r\n} from \"reactstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport classnames from \"classnames\";\r\nimport { Control, Form, Errors } from \"react-redux-form\";\r\nimport Register from \"./register\"\r\nimport Login from \"./login\"\r\nimport { logoutUser } from \"../redux/ActionCreators\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass Header extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      collapsed: true,\r\n      isNavOpen: false,\r\n      isModalOpen: false,\r\n      isPetIdModalOpen: false,\r\n      activeTab: \"1\",\r\n    };\r\n  }\r\n\r\n  // handleLogin = (values) => {\r\n  //   if (values.email) {\r\n  //     alert(\"Logged In\");\r\n  //   } else {\r\n  //     alert(\"Please Register First\");\r\n  //   }\r\n  //   this.toggleModal();\r\n  // };\r\n\r\n  // handleRegister = (values) => {\r\n  //   this.props.addUserInfo(\r\n  //     this.props.uniqueId.uniqueId,\r\n  //     \"localImageUrl\",\r\n  //     values,\r\n  //     true\r\n  //   );\r\n  //   this.toggleModal();\r\n  //   this.toggleModalPetId();\r\n  //   this.generateId();\r\n  // };\r\n\r\n  componentDidMount = () => {\r\n    this.props.getUserInfoDB()\r\n  }\r\n\r\n  \r\n  toggleModal = () => {\r\n\r\n    this.setState({\r\n      isModalOpen: !this.state.isModalOpen,\r\n    });\r\n  };\r\n  generateId = () => {\r\n    this.props.addUniqueId(uuid());\r\n  };\r\n  toggleModalPetId = () => {\r\n    this.setState(\r\n      {\r\n        isPetIdModalOpen: true,\r\n      },\r\n      () => {\r\n        setTimeout(this.handleClose, 3000);\r\n      }\r\n    );\r\n  };\r\n\r\n  handleClose = () => {\r\n    this.setState({\r\n      isPetIdModalOpen: false,\r\n    });\r\n  };\r\n\r\n  toggleNav = () => {\r\n    this.setState({\r\n      collapsed: !this.state.collapsed,\r\n    });\r\n  };\r\n\r\n  toggleTab = (tab) => {\r\n    if (this.state.activeTab !== tab) {\r\n      this.setState({ activeTab: tab });\r\n    }\r\n  };\r\n  onLogoutClick = () => {\r\n   this.props.logoutUser();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Navbar\r\n          id=\"navbar\"\r\n          className=\"site-header \"\r\n          expand=\"md\"\r\n          style={{ boxShadow: \"0 4px 4px 0 rgba(0, 0, 0, 0.5)\" }}\r\n          light\r\n        >\r\n          <NavbarBrand tag={RRNavLink} to=\"/petbook\" className=\"ml-4\" style={{ color: \"white\" }}>\r\n            <h5\r\n              style={{\r\n                fontSize: \"40px\",\r\n                textShadow: \"1px 1px 3px #363636\",\r\n                fontFamily: \"Fredoka One\",\r\n                fontWeight: \"200\",\r\n              }}\r\n            >\r\n              PetB\r\n              <img\r\n                src=\"/petbook/assets/pawprint2.png\"\r\n                style={{ width: \"40px\", margin: \"3px\" }}\r\n              ></img>\r\n              k\r\n            </h5>\r\n          </NavbarBrand>\r\n          <NavbarToggler onClick={this.toggleNav} className=\"mr-2 hamburger\" />\r\n          <Collapse isOpen={!this.state.collapsed} navbar>\r\n            <Nav navbar className=\"mx-auto\">\r\n              <NavItem className=\"mr-5 ml-4\">\r\n                <NavLink\r\n                  tag={RRNavLink}\r\n                 \r\n                  style={{\r\n                    fontWeight: \"bold\",\r\n                    color: \"white\",\r\n                  }}\r\n                  to=\"/LostPets\"\r\n                  onClick={!this.state.collapsed ? this.toggleNav : \"\"}\r\n                  activeStyle={{\r\n                    fontWeight: \"900\",\r\n                    color: \"white\",\r\n                    textDecoration: \"underline\",\r\n                    \r\n                  }}\r\n                >\r\n                  <img\r\n                    src=\"/petbook/assets/lostFound.png\"\r\n                    alt=\"lostPets\"\r\n                    style={{\r\n                      width: \"30px\",\r\n                      height: \"30px\",\r\n                      position: \"relative\",\r\n                      margin: \"3px\",\r\n                      display: \"inline-block\" \r\n                    }}\r\n                    className=\"align-bottom\"\r\n                  />\r\n\r\n                  <span\r\n                    style={{ display: \"inline\" }}\r\n                    className=\"text-nowrap align-bottom\"\r\n                  >\r\n                    Lost & Found\r\n                  </span>\r\n                </NavLink>\r\n              </NavItem>\r\n              <NavItem className=\"mr-5 ml-4\">\r\n                <NavLink\r\n                  tag={RRNavLink}\r\n                  onClick={!this.state.collapsed ? this.toggleNav : \"\"}\r\n                  to=\"/Feed\"\r\n                  style={{\r\n                    fontWeight: \"bold\",\r\n                    color: \"white\",\r\n                  }}\r\n                  activeStyle={{\r\n                    fontWeight: \"900\",\r\n                    color: \"white\",\r\n                    textDecoration: \"underline\",\r\n                  }}\r\n                \r\n                >\r\n                  <img\r\n                    src=\"/petbook/assets/home4.png\"\r\n                    alt=\"feed\"\r\n                    style={{\r\n                      width: \"30px\",\r\n                      height: \"30px\",\r\n                      position: \"relative\",\r\n                      margin: \"3px\",\r\n                      display: \"inline-block\" \r\n                    }}\r\n                    className=\"align-bottom\"\r\n                  />\r\n                  <span\r\n                    style={{ display: \"inline\" }}\r\n                    className=\"text-nowrap align-bottom\"\r\n                  >\r\n                    Home\r\n                  </span>\r\n                </NavLink>\r\n              </NavItem>\r\n            </Nav>\r\n            <UncontrolledDropdown inNavbar>\r\n            <DropdownToggle nav caret style={{ color: \"white\" }} className=\"dropdownTogglePosition\">\r\n              Profile\r\n              {\r\n                this.props.userinfodb.userInfodb.length === 0 ?<img\r\n                id=\"music\"\r\n                className=\"profileImg m-2\"\r\n                src=\"/petbook/assets/default.png\"\r\n                alt=\"profileImg\"\r\n                style={{ width: \"40px\" }}\r\n              /> :\r\n                this.props.userinfodb.userInfodb.mydata[0].profileImage === \" \" ? (\r\n                  <img\r\n                    id=\"music\"\r\n                    className=\"profileImg m-2\"\r\n                    src=\"/petbook/assets/default.png\"\r\n                    alt=\"profileImg\"\r\n                    style={{ width: \"40px\" }}\r\n                  />\r\n                ): (\r\n                <img\r\n                  id=\"proPic\"\r\n                  className=\"profileImg rounded-circle ml-3\"\r\n                  src={this.props.userinfodb.userInfodb.mydata[0].profileImage}\r\n                  alt=\"profileImg\"\r\n                  style={{ width: \"40px\" }}\r\n                />\r\n              )}\r\n            </DropdownToggle >\r\n              <DropdownMenu className=\"dropdownPosition\">\r\n                <NavItem className=\"\">\r\n                  {this.props.auth.isAuthenticated ? (\r\n                    <Link style={{ color: \"black\" }} to=\"/PetProfile\">\r\n                      <DropdownItem id=\"profileSettings\">\r\n                      {\r\n                this.props.userinfodb.userInfodb.length === 0 ?<img\r\n                id=\"music\"\r\n                className=\"profileImg m-2\"\r\n                src=\"/petbook/assets/default.png\"\r\n                alt=\"profileImg\"\r\n                style={{ width: \"40px\" }}\r\n              /> :\r\n                this.props.userinfodb.userInfodb.mydata[0].profileImage === \" \" ? (\r\n                  <img\r\n                    id=\"music\"\r\n                    className=\"profileImg m-2\"\r\n                    src=\"/petbook/assets/default.png\"\r\n                    alt=\"profileImg\"\r\n                    style={{ width: \"40px\" }}\r\n                  />\r\n                ): (\r\n                          <img\r\n                            id=\"proPic\"\r\n                            className=\"profileImg rounded-circle mr-2\"\r\n                            src={this.props.userinfodb.userInfodb.mydata[0].profileImage}\r\n                            alt=\"profileImg\"\r\n                            style={{\r\n                              width: \"40px\",\r\n                              objectFit: \"cover\",\r\n                              objectPosition: \"50% 50%\",\r\n                            }}\r\n                          />\r\n                        )}\r\n                        Your Profile\r\n                      </DropdownItem>\r\n                      <UncontrolledTooltip\r\n                        placement=\"left\"\r\n                        target=\"profileSettings\"\r\n                      >\r\n                        Profile and Settings\r\n                      </UncontrolledTooltip>\r\n                    </Link>\r\n                  ) : (\r\n                    <Link style={{ color: \"black\" }} to=\"/\">\r\n                      <DropdownItem id=\"profileSettings\" className=\"text-center m-0\">\r\n                        <img\r\n                          className=\"profileImg rounded-circle mr-1\"\r\n                          src=\"/petbook/assets/default.png\"\r\n                          alt=\"profileImg\"\r\n                          style={{\r\n                            width: \"40px\",\r\n                            objectFit: \"cover\",\r\n                            objectPosition: \"50% 50%\",\r\n                          }}\r\n                        />\r\n                        Your Profile\r\n                      </DropdownItem>\r\n                      <UncontrolledTooltip\r\n                        placement=\"left\"\r\n                        target=\"profileSettings\"\r\n                      >\r\n                        Profile and Settings\r\n                      </UncontrolledTooltip>\r\n                    </Link>\r\n                  )}\r\n                </NavItem>\r\n                <DropdownItem divider />\r\n                <DropdownItem>Settings</DropdownItem>\r\n                <DropdownItem>Help</DropdownItem>\r\n                <DropdownItem>\r\n                  <span className=\"navbar-text ml-2\">\r\n                    <Button color=\"primary\" onClick={this.toggleModal}>\r\n                      <i className=\"fa fa-sign-in fa-lg\" /> Login\r\n                    </Button>\r\n                  </span>\r\n                  <span className=\"navbar-text ml-2\">\r\n                    <Button color=\"primary\" onClick={this.onLogoutClick}>\r\n                      <i className=\"fa fa-sign-in fa-lg\" /> Logout\r\n                    </Button>\r\n                  </span>\r\n                </DropdownItem>\r\n              </DropdownMenu>\r\n              \r\n          </UncontrolledDropdown>\r\n          </Collapse>\r\n          \r\n          \r\n        \r\n        </Navbar>\r\n\r\n        <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>\r\n          <ModalHeader\r\n            toggle={this.toggleModal}\r\n            style={{\r\n              backgroundColor: \"#1b8eb1\",\r\n              color: \"white\",\r\n              textShadow: \"1px 1px 3px #363636\",\r\n              fontFamily: \"Nunit, sans-serif\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n          >\r\n            Login\r\n          </ModalHeader>\r\n          <ModalBody>\r\n            <Nav tabs>\r\n              <NavItem>\r\n                <NavLink\r\n                  className={classnames({\r\n                    active: this.state.activeTab === \"1\",\r\n                  })}\r\n                  onClick={() => {\r\n                    this.toggleTab(\"1\");\r\n                  }}\r\n                  href=\"#\"\r\n                >\r\n                  Log In\r\n                </NavLink>\r\n              </NavItem>\r\n              <NavItem>\r\n                <NavLink\r\n                  className={classnames({\r\n                    active: this.state.activeTab === \"2\",\r\n                  })}\r\n                  onClick={() => {\r\n                    this.toggleTab(\"2\");\r\n                  }}\r\n                  href=\"#\"\r\n                >\r\n                  Register\r\n                </NavLink>\r\n              </NavItem>\r\n            </Nav>\r\n            <TabContent activeTab={this.state.activeTab}>\r\n              <TabPane tabId=\"1\">\r\n              <Login toggleModal={this.toggleModal} addUserInfo={this.props.addUserInfo}/>\r\n                {/* <Form\r\n                  model=\"profileForm\"\r\n                  onSubmit={(values) => this.handleLogin(values)}\r\n                  className=\"mt-2\"\r\n                >\r\n                  <Row className=\"form-group \">\r\n                    <Col>\r\n                      <Label htmlFor=\"email\" className=\"ml-3\">\r\n                        Email:\r\n                      </Label>\r\n\r\n                      <Col md={10}>\r\n                        <Control.text\r\n                          model=\".email\"\r\n                          id=\"email\"\r\n                          name=\"email\"\r\n                          placeholder=\"email\"\r\n                          className=\"form-control\"\r\n                        />\r\n                      </Col>\r\n                    </Col>\r\n                  </Row>\r\n\r\n                  <Row className=\"form-group \">\r\n                    <Col>\r\n                      <Label htmlFor=\"password\" className=\"ml-3\">\r\n                        Password:\r\n                      </Label>\r\n\r\n                      <Col md={10}>\r\n                        <Control.text\r\n                          model=\".password\"\r\n                          id=\"password\"\r\n                          name=\"password\"\r\n                          placeholder=\"password\"\r\n                          className=\"form-control\"\r\n                        />\r\n                      </Col>\r\n                    </Col>\r\n                  </Row>\r\n\r\n                  <Button type=\"submit\" value=\"submit\" color=\"primary\">\r\n                    Login\r\n                  </Button>\r\n                </Form> */}\r\n              </TabPane>\r\n              <TabPane tabId=\"2\">\r\n                <Register toggleModal={this.toggleModal} addUserInfo={this.props.addUserInfo}/>\r\n                {/* <Form\r\n                  model=\"profileForm\"\r\n                  onSubmit={(values) => this.handleRegister(values)}\r\n                  className=\"mt-2\"\r\n                >\r\n                  <Row className=\"form-group \">\r\n                    <Col>\r\n                      <Label htmlFor=\"profileName\" className=\"ml-3\">\r\n                        Profile Name:\r\n                      </Label>\r\n\r\n                      <Col md={10}>\r\n                        <Control.text\r\n                          model=\".profileName\"\r\n                          id=\"profileName\"\r\n                          name=\"profileName\"\r\n                          placeholder=\"profileName\"\r\n                          className=\"form-control\"\r\n                        />\r\n                      </Col>\r\n                    </Col>\r\n                  </Row>\r\n                  <Row className=\"form-group \">\r\n                    <Col>\r\n                      <Label htmlFor=\"email\" className=\"ml-3\">\r\n                        Email:\r\n                      </Label>\r\n\r\n                      <Col md={10}>\r\n                        <Control.text\r\n                          model=\".email\"\r\n                          id=\"email\"\r\n                          name=\"email\"\r\n                          placeholder=\"email\"\r\n                          className=\"form-control\"\r\n                        />\r\n                      </Col>\r\n                    </Col>\r\n                  </Row>\r\n                  <Row className=\"form-group \">\r\n                    <Col>\r\n                      <Label htmlFor=\"password\" className=\"ml-3\">\r\n                        Password:\r\n                      </Label>\r\n\r\n                      <Col md={10}>\r\n                        <Control.text\r\n                          model=\".password\"\r\n                          id=\"password\"\r\n                          name=\"password\"\r\n                          placeholder=\"password\"\r\n                          className=\"form-control\"\r\n                        />\r\n                      </Col>\r\n                    </Col>\r\n                  </Row>\r\n                  <Button type=\"submit\" value=\"submit\" color=\"primary\">\r\n                    Register\r\n                  </Button>\r\n                </Form> */}\r\n              </TabPane>\r\n            </TabContent>\r\n          </ModalBody>\r\n        </Modal>\r\n        {/* <Modal\r\n          isOpen={this.state.isPetIdModalOpen}\r\n          toggle={this.toggleModalPetId}\r\n        >\r\n          <ModalHeader\r\n            toggle={this.toggleModalPetId}\r\n            style={{\r\n              backgroundColor: \"#1b8eb1\",\r\n              color: \"white\",\r\n              textShadow: \"1px 1px 3px #363636\",\r\n            }}\r\n          >\r\n            Owner Id\r\n          </ModalHeader>\r\n          <ModalBody>{this.props.uniqueId.uniqueId}</ModalBody>\r\n        </Modal> */}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\nHeader.propTypes = {\r\n  logoutUser: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default connect(\r\n \"\",\r\n  { logoutUser }\r\n)(Header);\r\n",["142","143"],"C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\uniqueId.js",[],"C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\profileForm.js",[],"C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\components\\FeedComponent.js",["144","145","146"],"import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport {\r\n  FormGroup,\r\n  Button,\r\n  ModalHeader,\r\n  Modal,\r\n  ModalBody,\r\n  Label,\r\n  Card,\r\n  CardBody,\r\n  CardTitle,\r\n  CardText,\r\n  CardImg,\r\n  TabPane,\r\n  TabContent,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n} from \"reactstrap\";\r\nimport { Control, LocalForm } from \"react-redux-form\";\r\nimport { storage } from \"../firebase\";\r\nimport classnames from \"classnames\";\r\nimport uuid from \"react-uuid\";\r\nimport Register from \"./register\";\r\nimport Login from \"./login\";\r\n\r\nclass PostForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isModalOpen: false,\r\n      touched: {\r\n        author: false,\r\n      },\r\n      feedPicPost: null,\r\n      feedPicPostURL: null,\r\n      progressState: 0,\r\n      text: null,\r\n    };\r\n  }\r\n\r\n  toggleModal = () => {\r\n    this.setState({\r\n      isModalOpen: !this.state.isModalOpen,\r\n    });\r\n  };\r\n\r\n  handleSubmit = (values) => {\r\n    //alert(this.props.postreducer.body)\r\n    this.toggleModal();\r\n    //console.log(this.props.userInfo.userInfo.length)\r\n    this.props.userPost(this.props.userInfo.userInfo.length === 0  ?\" \":this.props.userInfo.userInfo.info.PicPostURL, values.text);\r\n    this.props.postComment(values.text, this.state.feedPicPostURL);\r\n \r\n     \r\n    setTimeout(() => this.props.rerenderParentCallback(), 1000)\r\n  };\r\n\r\n\r\n  handleChange = (e) => {\r\n    if (e.target.files[0]) {\r\n      this.setState(\r\n        { feedPicPost: e.target.files[0] },\r\n        (this.handleUpload = () => {\r\n          const uploadTask = storage\r\n            .ref(`images/${this.state.feedPicPost.name}`)\r\n            .put(this.state.feedPicPost);\r\n          uploadTask.on(\r\n            \"state_changed\",\r\n            (snapshot) => {\r\n              const progress = Math.round(\r\n                (snapshot.bytesTransferred / snapshot.totalBytes) * 100\r\n              );\r\n              this.setState({ progressState: progress });\r\n            },\r\n            (error) => {\r\n              console.log(error);\r\n            },\r\n            () => {\r\n              storage\r\n                .ref(\"images\")\r\n                .child(this.state.feedPicPost.name)\r\n                .getDownloadURL()\r\n                .then((url) => {\r\n                  console.log(url);\r\n                  this.props.addUserInfo({PicPostURL: url})\r\n                  this.setState({ feedPicPostURL: url });\r\n                });\r\n            }\r\n          );\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"m-2\">\r\n        <Modal isOpen={this.state.isCropOpen} toggle={this.toggleModalCropOpen}>\r\n          <ModalHeader\r\n            toggle={this.toggleModalCropOpen}\r\n            style={{\r\n              backgroundColor: \"#1b8eb1\",\r\n              color: \"white\",\r\n              textShadow: \"1px 1px 3px #363636\",\r\n            }}\r\n          >\r\n            Crop\r\n          </ModalHeader>\r\n          <ModalBody\r\n            style={{ width: \"100%\", height: \"400px\", objectFit: \"none\" }}\r\n          ></ModalBody>\r\n        </Modal>\r\n        <Button\r\n          type=\"submit\"\r\n          color=\"primary\"\r\n          outline\r\n          className=\"fa-sm\"\r\n          onClick={this.toggleModal}\r\n        >\r\n          <i className=\"fa fa-pencil \" /> Post\r\n        </Button>\r\n\r\n        <div className=\"rectangle rounded\" onClick={this.toggleModal}></div>\r\n\r\n        <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>\r\n          <ModalHeader\r\n            toggle={this.toggleModal}\r\n            style={{\r\n              backgroundColor: \"#1b8eb1\",\r\n              color: \"white\",\r\n              textShadow: \"1px 1px 3px #363636\",\r\n            }}\r\n          >\r\n            Submit Comment\r\n          </ModalHeader>\r\n          <ModalBody>\r\n            <LocalForm onSubmit={(values) => this.handleSubmit(values)}>\r\n              <div className=\"form-group\">\r\n                <Label htmlFor=\"text\">Comment</Label>\r\n                <Control.textarea\r\n                  model=\".text\"\r\n                  id=\"text\"\r\n                  name=\"text\"\r\n                  rows=\"6\"\r\n                  className=\"form-control\"\r\n                  defaultValue=\"\"\r\n                  style={{\r\n                    fontFamily: \"Nunito\",\r\n                    fontWeight: \"400\",\r\n                  }}\r\n                />\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <FormGroup>\r\n                  <Control.file\r\n                    model=\".file\"\r\n                    id=\"file\"\r\n                    name=\"file\"\r\n                    placeholder=\"Image\"\r\n                    className=\"form-control\"\r\n                    onChange={this.handleChange}\r\n                  />\r\n                </FormGroup>\r\n                <Button type=\"submit\" value=\"submit\" color=\"primary\">\r\n                  Submit\r\n                </Button>\r\n              </div>\r\n            </LocalForm>\r\n          </ModalBody>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst apiPser = axios.create({\r\n  baseURL: \"http://localhost:5000/api/users/\",\r\n});\r\n\r\nconst apiPosts = axios.create({\r\n  baseURL: \"http://localhost:5000/api/posts/\",\r\n});\r\nconst apiUserInfoDBs = axios.create({\r\n  baseURL: \"http://localhost:5000/api/userinfodbs/\",\r\n});\r\n\r\nclass Feed extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      mainProfileName: \"Keith\",\r\n      postText: \"\",\r\n      postImage: \"\",\r\n      activeTab: \"2\",\r\n      data: [],\r\n      posts: [],\r\n      userinfo:[],\r\n      userInfoDB:[],\r\n      error: \"\",\r\n    };\r\n\r\n    // api.get('/',{\r\n    //   headers:{\r\n    //     \"Authorization\":localStorage.getItem(\"jwtToken\"),\r\n    //     \"Content-Type\":\"application/json\",\r\n    //     'Access-Control-Allow-Origin':'*'\r\n    //   }\r\n    // })\r\n    // .then(response => {\r\n    //   response.statusCode = 200;\r\n    //   response.setHeader(\"Content-Type\", \"application/json\",\"Access-Control-Allow-Origin\", \"*\");\r\n    //  console.log(response.data)\r\n    // });\r\n  }\r\n\r\n  handleInputChange = (event) => {\r\n    const target = event.target;\r\n    const name = target.name;\r\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\r\n\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    alert(\"Current state is: \" + JSON.stringify(this.state));\r\n    this.setState({\r\n      postText: \"\",\r\n      postImage: \"\",\r\n    }\r\n    );\r\n\r\n  };\r\n  handleLogin = (values) => {\r\n    if (values.email) {\r\n      alert(\"Logged In\");\r\n    } else {\r\n      alert(\"Please Register First\");\r\n    }\r\n    this.toggleModal();\r\n  };\r\n\r\n  handleRegister = (values) => {\r\n    this.props.addUserInfo(\r\n      this.props.uniqueId.uniqueId,\r\n      \"localImageUrl\",\r\n      values,\r\n      true\r\n    );\r\n    this.toggleModal();\r\n    this.generateId();\r\n  };\r\n\r\n  generateId = () => {\r\n    this.props.addUniqueId(uuid());\r\n  };\r\n\r\n  toggleModal = () => {\r\n    this.setState({\r\n      isModalOpen: !this.state.isModalOpen,\r\n    });\r\n  };\r\n\r\n  componentDidMount = () => {\r\n    if (!this.props.auth.isAuthenticated) {\r\n      this.setState({\r\n        isModalOpen: !this.state.isModalOpen,\r\n      });\r\n    }\r\n    this.props.getUserInfoDB()\r\n    apiPosts\r\n      .get(\"/allpost\")\r\n      //.then((response) => response.json())\r\n      .then((response) => {\r\n        console.log(response.data)\r\n        //console.log(response.data)\r\n        this.setState({ posts: response.data }\r\n         , () => console.log(this.state.posts)\r\n        );\r\n      })\r\n      .catch((err) => {\r\n        this.setState({ error: err });\r\n      });\r\n    if (this.state.error || !Array.isArray(this.state.posts)) {\r\n      return console.log(\"This is not an array\");\r\n    }\r\n\r\n\r\n    apiUserInfoDBs\r\n    .get(\"/alluserinfo\")\r\n    //.then((response) => response.json())\r\n    .then((response) => {\r\n      //console.log(response.data)\r\n      //console.log(response.data)\r\n      this.setState({ userinfo: response.data }\r\n       , () => console.log(this.state.userinfo)\r\n      );\r\n    })\r\n    .catch((err) => {\r\n      this.setState({ error: err });\r\n    });\r\n\r\n    this.setState({userInfoDB: this.props.userinfodb})\r\n  };\r\n\r\n\r\n  rerenderParentCallback = () => {\r\n    apiPosts\r\n    .get(\"/allpost\")\r\n    //.then((response) => response.json())\r\n    .then((response) => {\r\n      \r\n      this.setState({ posts: response.data }\r\n      //  , () => console.log(this.state.posts)\r\n      );\r\n    })\r\n    .catch((err) => {\r\n      this.setState({ error: err });\r\n    });\r\n  if (this.state.error || !Array.isArray(this.state.posts)) {\r\n    return console.log(\"This is not an array \");\r\n  }\r\n  }\r\n\r\n  toggleTab = (tab) => {\r\n    if (this.state.activeTab !== tab) {\r\n      this.setState({ activeTab: tab });\r\n    }\r\n  };\r\n  render() {\r\n    \r\n    return (\r\n      <div className=\"container \">\r\n        <div\r\n          id=\"postHead\"\r\n          className=\"row row-content\"\r\n          style={{ position: \"relative\" }}\r\n        >\r\n          <div className=\"col-12 mx-auto p-2 \">\r\n            \r\n            <Card className=\"m-2 lostPetCard\">\r\n              <div class=\"card-horizontal\">\r\n               {\r\n                this.props.userinfodb.userInfodb.length === 0 ?<CardImg\r\n                id=\"music\"\r\n                className=\"profileImg m-2\"\r\n                src=\"/petbook/assets/default.png\"\r\n                alt=\"profileImg\"\r\n                style={{ width: \"40px\" }}\r\n              /> :\r\n                this.props.userinfodb.userInfodb.mydata[0].profileImage === \" \" ? (\r\n                  <CardImg\r\n                    id=\"music\"\r\n                    className=\"profileImg m-2\"\r\n                    src=\"/petbook/assets/default.png\"\r\n                    alt=\"profileImg\"\r\n                    style={{ width: \"40px\" }}\r\n                  />\r\n                ) : (\r\n                  <CardImg\r\n                    id=\"music\"\r\n                    className=\"profileImg m-2\"\r\n                    src={this.props.userinfodb.userInfodb.mydata[0].profileImage}\r\n                    alt=\"profileImg2\"\r\n                    style={{ width: \"40px\" }}\r\n                  />\r\n                )}\r\n\r\n                <CardTitle\r\n                  style={{ fontFamily: \"Fredoka One\", fontWeight: \"200\" }}\r\n                  className=\"mt-3\"\r\n                >\r\n                  {\" \"}\r\n                  {!this.props.auth.isAuthenticated\r\n                    ? \"Not Logged In\"\r\n                    : this.props.auth.user.name}\r\n                </CardTitle>\r\n              </div>\r\n              <div className=\"border\">\r\n                <PostForm\r\n                  postComment={this.props.postComment}\r\n                  userPost={this.props.userPost}\r\n                  postreducer={this.props.postreducer}\r\n                  addUserInfo={this.props.addUserInfo}\r\n                  userInfo={this.props.userInfo}\r\n                  rerenderParentCallback={this.rerenderParentCallback}\r\n                />\r\n              </div>\r\n            </Card>\r\n          </div>\r\n        </div>\r\n        <div className=\"\">\r\n          {typeof this.state.posts.posts === \"undefined\" ? (\r\n            <div></div>\r\n          ) : (\r\n            this.state.posts.posts.map((post, index) => {\r\n              return (\r\n                <div className=\"container\" key={index}>\r\n                  <div className=\"row row-content\">\r\n                    <div className=\"col-12 mx-auto p-2\">\r\n                      <Card\r\n                        className=\"m-2 lostPetCard\"\r\n                        style={{\r\n                          width: \"auto\",\r\n                          height: \"auto\",\r\n                          boxShadow: \"0 4px 4px 0 rgba(0, 0, 0, 0.5)\",\r\n                        }}\r\n                      >\r\n\r\n                        <div class=\"card-horizontal\">\r\n                       \r\n                          {console.log(this.state.userinfo\r\n                            )}\r\n                          {\r\n                          this.state.userinfo.length === 0  ? (\r\n                            <CardImg\r\n                              id=\"music\"\r\n                              className=\"profileImg mr-2 ml-2 mt-2\"\r\n                              src=\"/petbook/assets/default.png\"\r\n                              //src={this.state.userinfo.userinfo.filter(id1=>  this.state.posts.posts.some(id2=> id1.userIdentity === id2.postedBy._id)).profileImage}\r\n\r\n                              alt=\"profileImg\"\r\n                              style={{\r\n                                width: \"60px\",\r\n                                objectFit: \"cover\",\r\n                                objectPosition: \"50% 50%\",\r\n                              }}\r\n                            />\r\n                          ) : (\r\n                            <CardImg\r\n                              id=\"music\"\r\n                              className=\"profileImg mr-2 ml-2 mt-2\"          \r\n                              \r\n                             // result1.filter(o1 => result2.some(o2 => o1.id === o2.id));\r\n                              src={this.state.userinfo.userinfo.filter(element => element.userIdentity === post.postedByPrivate)[0].profileImage}\r\n                              alt=\"profileImg2\"\r\n                              style={{\r\n                                width: \"60px\",\r\n                                objectFit: \"cover\",\r\n                                objectPosition: \"50% 50%\",\r\n                              }}\r\n                            />\r\n                          )}                                                                                         \r\n                            {/* {console.log(this.state.userinfo.userinfo.filter(id=> id.userIdentity).map(a => {a.profileImage}))} */}\r\n\r\n                          <CardTitle\r\n                            style={{\r\n                              fontFamily: \"Fredoka One\",\r\n                              fontWeight: \"200\",\r\n                            }}\r\n                            className=\"mt-4\"\r\n                          >\r\n                            {\" \"}\r\n                            {post.postedBy.map((item, i) => {\r\n                              return (\r\n                                <div style={{ color: \"black\" }} key={i}>\r\n                                  {item.name}\r\n                                </div>\r\n                              );\r\n                            })}\r\n                          </CardTitle>\r\n                        </div>\r\n                        <CardBody\r\n                          className=\"mx-auto\"\r\n                          style={{ width: \"100%\", height: \"auto\" }}\r\n                        >\r\n                          <CardText\r\n                            className=\"text-center text-break text-wrap \"\r\n                            style={{\r\n                              fontSize: \"calc(.5em + 1vw)\",\r\n                              height: \"auto!important\",\r\n                              fontFamily: \"Nunito\",\r\n                              fontWeight: \"400\",\r\n                            }}\r\n                          >\r\n                            {post.body}\r\n                          </CardText>\r\n                          {post.postImage === null ? (\r\n                            <div></div>\r\n                          ) : (\r\n                            <CardImg\r\n                              className=\"img-fluid mx-auto\"\r\n                              style={{\r\n                                width: \"70vh\",\r\n                                height: \"auto\",\r\n                                objectFit: \"contain\",\r\n                                objectPosition: \"50% 50%\",\r\n                                display: \"block\",\r\n                                verticalAlign: \"top\",\r\n                              }}\r\n                              src={post.pic}\r\n                            />\r\n                          )}\r\n                        </CardBody>\r\n                      </Card>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })\r\n          )}\r\n\r\n\r\n        </div>\r\n        <Modal\r\n          backdrop=\"static\"\r\n          isOpen={this.state.isModalOpen}\r\n          toggle={this.toggleModal}\r\n        >\r\n          <ModalHeader\r\n            toggle={this.toggleModal}\r\n            style={{\r\n              backgroundColor: \"#1b8eb1\",\r\n              color: \"white\",\r\n              textShadow: \"1px 1px 3px #363636 \",\r\n            }}\r\n          >\r\n            Login\r\n          </ModalHeader>\r\n          <ModalBody>\r\n            <Nav tabs>\r\n              <NavItem>\r\n                <NavLink\r\n                  className={classnames({\r\n                    active: this.state.activeTab === \"1\",\r\n                  })}\r\n                  onClick={() => {\r\n                    this.toggleTab(\"1\");\r\n                  }}\r\n                  href=\"#\"\r\n                >\r\n                  Log In\r\n                </NavLink>\r\n              </NavItem>\r\n              <NavItem>\r\n                <NavLink\r\n                  className={classnames({\r\n                    active: this.state.activeTab === \"2\",\r\n                  })}\r\n                  onClick={() => {\r\n                    this.toggleTab(\"2\");\r\n                  }}\r\n                  href=\"#\"\r\n                >\r\n                  Register\r\n                </NavLink>\r\n              </NavItem>\r\n            </Nav>\r\n            <TabContent activeTab={this.state.activeTab}>\r\n              <TabPane tabId=\"1\">\r\n                <Login\r\n                  toggleModal={this.toggleModal}\r\n                  addUserInfo={this.props.addUserInfo}\r\n                />\r\n              </TabPane>\r\n              <TabPane tabId=\"2\">\r\n                <Register\r\n                  toggleModal={this.toggleModal}\r\n                  addUserInfo={this.props.addUserInfo}\r\n                  addUserInfoDB={this.props.addUserInfoDB}\r\n                />\r\n              </TabPane>\r\n            </TabContent>\r\n          </ModalBody>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Feed;\r\n","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\ActionCreators.js",[],"C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\ActionTypes.js",[],"C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\firebase\\index.js",[],"C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\configureStore.js",["147"],"import { createStore, combineReducers,applyMiddleware,compose  } from \"redux\";\r\nimport thunk from 'redux-thunk';\r\nimport {createForms} from 'react-redux-form';\r\nimport { UniqueIds } from \"./uniqueId\";\r\nimport { Post } from \"./post\";\r\nimport { UserInfo } from \"./userInfo\";\r\nimport { Petcard } from \"./petCard\";\r\nimport {InitialFeedback} from './profileForm';\r\nimport {InitialFeedback2} from './lostPetForm';\r\nimport {InitialFeedback3} from './petForm';\r\nimport {authReducer} from \"./authReducer\";\r\nimport {postReducer} from \"./postReducer\";\r\nimport {petReducer} from \"./petReducer\";\r\nimport {userInfoDBReducer} from \"./userInfoDBReducer\";\r\nimport {errorReducer} from \"./errorReducer\";\r\nconst initialState = {};\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\nexport const ConfigureStore = () => {\r\nconst store = createStore(\r\n    combineReducers({\r\n      uniqueId: UniqueIds,\r\n      post: Post, \r\n      userInfo:UserInfo,\r\n      petcard:Petcard,\r\n      auth: authReducer,\r\n      postreducer:postReducer,\r\n      userinfodb:userInfoDBReducer,\r\n      pet:petReducer,\r\n  errors: errorReducer,\r\n      ...createForms({\r\n        profileForm: InitialFeedback,\r\n        lostPetForm: InitialFeedback2,\r\n        petForm: InitialFeedback3\r\n      })\r\n    }),\r\n    composeEnhancers(applyMiddleware(thunk))\r\n\r\n  );\r\n  return store; \r\n \r\n};\r\n","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\userInfo.js",[],"C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\lostPetForm.js",[],"C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\components\\PublicProfile.js",["148","149"],"C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\components\\SheltersComponent.js",[],"C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\errorReducer.js",[],"C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\authReducer.js",[],"C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\components\\register.js",["150","151","152","153","154"],"import React, { Component } from \"react\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { registerUser } from \"../redux/ActionCreators\";\r\nimport classnames from \"classnames\";\r\nimport { Control, Form } from \"react-redux-form\";\r\n//import uuid from \"react-uuid\";\r\nimport {\r\n    Button,\r\n    Label,\r\n    Row,\r\n    Col,\r\n  } from \"reactstrap\";\r\nclass Register extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n        name : \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n      password2: \"\",\r\n      errors: {}\r\n    };\r\n  }\r\n  // generateId = () => {\r\n  //   this.props.addUserInfoDB(uuid());\r\n  // };\r\n  componentDidMount() {\r\n    // If logged in and user navigates to Register page, should redirect them to dashboard\r\n    if (this.props.auth.isAuthenticated) {\r\n      this.props.history.push(\"/PetProfile\");\r\n      this.props.toggleModal()\r\n      alert(\"Already Loged In\")\r\n    }\r\n  }\r\ncomponentWillReceiveProps(nextProps) {\r\n    if (nextProps.errors) {\r\n      this.setState({\r\n        errors: nextProps.errors\r\n      });\r\n    }\r\n\r\n  }\r\nonChange = e => {\r\n    this.setState({ [e.target.id]: e.target.value });\r\n  };\r\nonSubmit = (e) => {\r\n    //e.preventDefault();\r\n     if( this.state.name !== \"\"){\r\n        this.setState({\r\n            errors: this.props.errors.name = null,\r\n          });\r\n    }\r\n     if(this.state.email !== \"\"){\r\n        this.setState({\r\n\r\n            errors: this.props.errors.email = null,\r\n          });\r\n    }\r\n   if(this.state.password !== \"\"){\r\n        this.setState({\r\n\r\n            errors: this.props.errors.password = null,\r\n          });\r\n    }\r\n   if(this.state.password2 !== \"\"){\r\n        this.setState({\r\n            errors: this.props.errors.password2 = null,\r\n          });\r\n    } \r\nif (this.props.errors.name === null && this.props.errors.email === null &&this.props.errors.password === null && this.props.errors.password2 === null){\r\n    this.props.toggleModal()\r\n}\r\n    this.props.addUserInfo(\r\n  {profileName:this.state.name}\r\n      )\r\n\r\nconst newUser = {\r\n    name: this.state.name,\r\n      email: this.state.email,\r\n      password: this.state.password,\r\n      password2: this.state.password2\r\n    };\r\nthis.props.registerUser(newUser, this.props.history); \r\n  };\r\nrender() {\r\n    const { errors } = this.state;\r\nreturn (\r\n\r\n  <Form\r\n    model=\"profileForm\"\r\n    onSubmit={(values) => this.onSubmit(values)}\r\n    className=\"mt-2\"\r\n  >\r\n    <Row className=\"form-group \">\r\n      <Col>\r\n        <Label htmlFor=\"name\" className=\"ml-3\">\r\n          Profile Name:\r\n        </Label>\r\n        <Col md={10}>\r\n          <Control.text\r\n            model=\".name\"\r\n            id=\"name\"\r\n            name=\"name\"\r\n            placeholder=\"name\"\r\n            onChange={this.onChange}\r\n            value={this.state.name}\r\n            className={classnames(\"form-control\", {\r\n                invalid: errors.name\r\n               })}\r\n          />\r\n          <span className=\"text-danger m-1\">{errors.name}</span>\r\n        </Col>\r\n      </Col>\r\n    </Row>\r\n    <Row className=\"form-group \">\r\n      <Col>\r\n        <Label htmlFor=\"email\" className=\"ml-3\">\r\n          Email:\r\n        </Label>\r\n\r\n        <Col md={10}>\r\n          <Control.text\r\n            model=\".email\"\r\n            id=\"email\"\r\n            name=\"email\"\r\n            placeholder=\"email\"\r\n         \r\n            onChange={this.onChange}\r\n            value={this.state.email}\r\n            className={classnames(\"form-control\", {\r\n                invalid: errors.email\r\n               })}\r\n\r\n          />\r\n    <span className=\"text-danger m-1\">{errors.email}</span>\r\n        </Col>\r\n      </Col>\r\n    </Row>\r\n    <Row className=\"form-group \">\r\n      <Col>\r\n        <Label htmlFor=\"password\" className=\"ml-3\">\r\n          Password:\r\n        </Label>\r\n\r\n        <Col md={10}>\r\n          <Control.text\r\n            model=\".password\"\r\n            id=\"password\"\r\n            name=\"password\"\r\n            placeholder=\"password\"\r\n\r\n            onChange={this.onChange}\r\n            value={this.state.password}\r\n            error={errors.password}\r\n            className={classnames(\"form-control\", {\r\n                invalid: errors.password\r\n               })}\r\n          />\r\n          <span className=\"text-danger m-1\">{errors.password}</span>\r\n        </Col>\r\n      </Col>\r\n    </Row>\r\n    <Row className=\"form-group \">\r\n      <Col>\r\n        <Label htmlFor=\"password2\" className=\"ml-3\">\r\n          Comfirm Password:\r\n        </Label>\r\n\r\n        <Col md={10}>\r\n          <Control.text\r\n            model=\".password\"\r\n            id=\"password2\"\r\n            name=\"password2\"\r\n            placeholder=\"password2\"\r\n\r\n            onChange={this.onChange}\r\n            value={this.state.password2}\r\n            error={errors.password2}\r\n            className={classnames(\"form-control\", {\r\n            invalid: errors.password2\r\n           })}\r\n          />\r\n          <span className=\"text-danger m-1\">{errors.password2}</span>\r\n        </Col>\r\n      </Col>\r\n    </Row>\r\n\r\n    <Button type=\"submit\" value=\"submit\" color=\"primary\">\r\n      Register\r\n    </Button>\r\n  </Form>\r\n\r\n    );\r\n  }\r\n}\r\nRegister.propTypes = {\r\n  registerUser: PropTypes.func.isRequired,\r\n  auth: PropTypes.object.isRequired,\r\n  errors: PropTypes.object.isRequired\r\n};\r\nconst mapStateToProps = state => ({\r\n  auth: state.auth,\r\n  errors: state.errors\r\n});\r\nexport default connect(\r\n  mapStateToProps,\r\n  { registerUser }\r\n)(withRouter(Register));","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\utils\\setAuthToken.js",[],"C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\post.js",[],"C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\components\\MainComponent.js",["155","156"],"C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\components\\LostpetsComponent.js",["157","158"],"C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\components\\PetProfileComponent.js",["159","160","161","162","163","164","165","166","167","168","169","170","171"],"import React, { Component } from \"react\";\r\nimport {\r\n  Button,\r\n  Label,\r\n  Row,\r\n  Col,\r\n  ModalHeader,\r\n  Modal,\r\n  ModalBody,\r\n  Card,\r\n  CardBody,\r\n  CardTitle,\r\n} from \"reactstrap\";\r\nimport { Control, Form, Errors } from \"react-redux-form\";\r\nimport uuid from \"react-uuid\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { storage } from \"../firebase\";\r\n\r\nfunction Uni(props) {\r\n  if (props.uniqueId.uniqueId) {\r\n    return <div>{props.uniqueId.uniqueId}</div>;\r\n  } else {\r\n    return <div>Failed</div>;\r\n  }\r\n}\r\n\r\n\r\nclass AddPet extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isModalOpen: false,\r\n      touched: {\r\n        author: false,\r\n      },\r\n      petImg: null,\r\n      petImgURL: \"\",\r\n      progressState: 0,\r\n    };\r\n  }\r\n\r\n  toggleModal = () => {\r\n    this.setState({\r\n      isModalOpen: !this.state.isModalOpen,\r\n    });\r\n  };\r\n  handleSubmit = (values) => {\r\n    this.toggleModal();\r\n    // const localImageUrl =  window.URL.createObjectURL(values.file[0]);\r\n    this.props.addPetCard(uuid(), values, this.state.petImgURL);\r\n    this.props.addPet(values.name,this.state.petImgURL,values.animalType,\r\n    values.breed,values.mainColor,values.secondaryColor,values.about)\r\n    setTimeout(() => this.props.getPets(), 1000)\r\n    \r\n  };\r\n\r\n  handleChange = (e) => {\r\n    if (e.target.files[0]) {\r\n      this.setState(\r\n        { petImg: e.target.files[0] },\r\n        (this.handleUpload = (event) => {\r\n          console.log(this.state.petImg);\r\n          const uploadTask = storage\r\n            .ref(`images/${this.state.petImg.name}`)\r\n            .put(this.state.petImg);\r\n\r\n          uploadTask.on(\r\n            \"state_changed\",\r\n            (snapshot) => {\r\n              const progress = Math.round(\r\n                (snapshot.bytesTransferred / snapshot.totalBytes) * 100\r\n              );\r\n              this.setState({ progressState: progress });\r\n            },\r\n            (error) => {\r\n              console.log(error);\r\n            },\r\n            () => {\r\n              storage\r\n                .ref(\"images\")\r\n                .child(this.state.petImg.name)\r\n                .getDownloadURL()\r\n                .then((url) => {\r\n                  console.log(url);\r\n                  this.setState({ petImgURL: url });\r\n                  console.log(this.state.petImgURL);\r\n                });\r\n            }\r\n          );\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <i\r\n          className=\"fa fa-plus-circle fa-2x d-flex align-items-center btn btn-primary btn-sm\"\r\n          style={{ color: \"\", cursor: \"pointer\" }}\r\n          onClick={this.toggleModal}\r\n        />\r\n\r\n        <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>\r\n          <ModalHeader\r\n            toggle={this.toggleModal}\r\n            style={{\r\n              backgroundColor: \"#1b8eb1\",\r\n              color: \"white\",\r\n              textShadow: \"1px 1px 3px #363636\",\r\n            }}\r\n          >\r\n            Animal Details\r\n          </ModalHeader>\r\n          <ModalBody>\r\n            <Form\r\n              model=\"petForm\"\r\n              onSubmit={(values) => this.handleSubmit(values)}\r\n            >\r\n              <Row className=\"form-group\">\r\n                <Label htmlFor=\"name\" md={2}>\r\n                  Name:\r\n                </Label>\r\n                <Col md={10}>\r\n                  <Control.text\r\n                    model=\".name\"\r\n                    id=\"name\"\r\n                    name=\"name\"\r\n                    placeholder=\"Name\"\r\n                    className=\"form-control\"\r\n                    style={{ boxShadow: \"0 2px 2px 0 rgba(0, 0, 0, 0.5)\" }}\r\n                  />\r\n                  <Errors\r\n                    className=\"text-danger\"\r\n                    model=\".name\"\r\n                    show=\"touched\"\r\n                    component=\"div\"\r\n                  />\r\n                </Col>\r\n              </Row>\r\n              <Row className=\"form-group\">\r\n                <Label htmlFor=\"petImg\" md={2}>\r\n                  Pet Image\r\n                </Label>\r\n\r\n                <Col md={10}>\r\n                  <Control.file\r\n                    model=\".petImg\"\r\n                    id=\"petImg\"\r\n                    name=\"petImg\"\r\n                    placeholder=\"Pet Image\"\r\n                    className=\"form-control\"\r\n                    onChange={this.handleChange}\r\n                    style={{ boxShadow: \"0 2px 2px 0 rgba(0, 0, 0, 0.5)\" }}\r\n                  />\r\n                  <Errors\r\n                    className=\"text-danger\"\r\n                    model=\".petImg\"\r\n                    show=\"touched\"\r\n                    component=\"div\"\r\n                  />\r\n                </Col>\r\n              </Row>\r\n              <Row className=\"form-group\">\r\n                <Label htmlFor=\"animalType\" md={2}>\r\n                  Animal Type:\r\n                </Label>\r\n                <Col md={10}>\r\n                  <Control.text\r\n                    model=\".animalType\"\r\n                    id=\"animalType\"\r\n                    name=\"animalType\"\r\n                    placeholder=\"Animal Type\"\r\n                    className=\"form-control\"\r\n                    style={{ boxShadow: \"0 2px 2px 0 rgba(0, 0, 0, 0.5)\" }}\r\n                  />\r\n                  <Errors\r\n                    className=\"text-danger\"\r\n                    model=\".animalType\"\r\n                    show=\"touched\"\r\n                    component=\"div\"\r\n                  />\r\n                </Col>\r\n              </Row>\r\n\r\n              <Row className=\"form-group\">\r\n                <Label htmlFor=\"breed\" md={2}>\r\n                  Breed:\r\n                </Label>\r\n                <Col md={10}>\r\n                  <Control.text\r\n                    model=\".breed\"\r\n                    id=\"breed\"\r\n                    name=\"breed\"\r\n                    placeholder=\"Breed\"\r\n                    className=\"form-control\"\r\n                    style={{ boxShadow: \"0 2px 2px 0 rgba(0, 0, 0, 0.5)\" }}\r\n                  />\r\n                  <Errors\r\n                    className=\"text-danger\"\r\n                    model=\".breed\"\r\n                    show=\"touched\"\r\n                    component=\"div\"\r\n                  />\r\n                </Col>\r\n              </Row>\r\n\r\n              <Row className=\"form-group\">\r\n                <Label htmlFor=\"mainColor\" md={2}>\r\n                  Main Color:\r\n                </Label>\r\n                <Col md={10}>\r\n                  <Control.text\r\n                    model=\".mainColor\"\r\n                    id=\"mainColor\"\r\n                    name=\"mainColor\"\r\n                    placeholder=\"Main Color\"\r\n                    className=\"form-control\"\r\n                    style={{ boxShadow: \"0 2px 2px 0 rgba(0, 0, 0, 0.5)\" }}\r\n                  />\r\n                  <Errors\r\n                    className=\"text-danger\"\r\n                    model=\".mainColor\"\r\n                    show=\"touched\"\r\n                    component=\"div\"\r\n                  />\r\n                </Col>\r\n              </Row>\r\n\r\n              <Row className=\"form-group\">\r\n                <Label htmlFor=\"secondaryColor\" md={2}>\r\n                  Secondary Color\r\n                </Label>\r\n                <Col md={10}>\r\n                  <Control.text\r\n                    model=\".secondaryColor\"\r\n                    id=\"secondaryColor\"\r\n                    name=\"secondaryColor\"\r\n                    placeholder=\"Secondary Color\"\r\n                    className=\"form-control\"\r\n                    style={{ boxShadow: \"0 2px 2px 0 rgba(0, 0, 0, 0.5)\" }}\r\n                  />\r\n                  <Errors\r\n                    className=\"text-danger\"\r\n                    model=\".secondaryColor\"\r\n                    show=\"touched\"\r\n                    component=\"div\"\r\n                  />\r\n                </Col>\r\n              </Row>\r\n              <Row className=\"form-group\">\r\n                <Label htmlFor=\"about\" md={2}>\r\n                  About:\r\n                </Label>\r\n                <Col md={10}>\r\n                  <Control.textarea\r\n                    model=\".about\"\r\n                    id=\"about\"\r\n                    name=\"about\"\r\n                    placeholder=\"About\"\r\n                    className=\"form-control\"\r\n                    style={{ boxShadow: \"0 2px 2px 0 rgba(0, 0, 0, 0.5)\" }}\r\n                    validators={{}}\r\n                  />\r\n                  <Errors\r\n                    className=\"text-danger\"\r\n                    model=\".about\"\r\n                    show={true}\r\n                    component=\"div\"\r\n                    messages={{\r\n                      required: \"Required\",\r\n                      maxLength: \"Must be 108 characters or less\",\r\n                    }}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n\r\n              <Button type=\"submit\" value=\"submit\" color=\"primary\">\r\n                Submit\r\n              </Button>\r\n            </Form>\r\n          </ModalBody>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass PetProfile extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      profileImage: null,\r\n      profileImageURL: \"\",\r\n      profileName: \"\",\r\n      firstName: \"\",\r\n      lastName: \"\",\r\n      email: \"\",\r\n      animalType: \"\",\r\n      breed: \"\",\r\n      mainColor: \"\",\r\n      secondaryColor: \"\",\r\n      progressState: 0,\r\n    };\r\n   \r\n  }\r\n  handleSubmit = (values) => {\r\n    // this.props.addUserInfo(\r\n    //   this.props.uniqueId.uniqueId,\r\n    //   this.state.profileImageURL,\r\n    //   values\r\n    // );\r\n\r\n\r\n    if (!this.props.userinfodb.userInfodb.mydata[0]\r\n      ){\r\n\r\n      this.props.addUserInfoDB(!this.state.profileImageURL?\" \":this.state.profileImageURL,\r\n      !values.firstName ?\" \":values.firstName,\r\n      !values.lastName?\" \":values.lastName,\r\n      !values.ownerAbout?\" \":values.ownerAbout)\r\n\r\n    }else{\r\n      this.props.updateUserInfoDB(!this.state.profileImageURL?\" \":this.state.profileImageURL,\r\n      !values.firstName ?\" \":values.firstName,\r\n      !values.lastName?\" \":values.lastName,\r\n      !values.ownerAbout?\" \":values.ownerAbout)\r\n    }\r\n\r\n    \r\n \r\n\r\n  };\r\n\r\n\r\n\r\n  componentDidMount = () => { \r\n    this.props.getUserInfoDB()\r\n    this.props.getUserPost()\r\n    this.props.getPets()\r\n  \r\n  }\r\n \r\n  handleInputChange = (event) => {\r\n    const target = event.target;\r\n    const name = target.name;\r\n    const value = target.type === \"checkbox\" ? target.checked : target.value;\r\n\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  handleChange = (e) => {\r\n    if (e.target.files[0]) {\r\n      this.setState(\r\n        { profileImage: e.target.files[0] },\r\n        (this.handleUpload = () => {\r\n          const uploadTask = storage\r\n            .ref(`images/${this.state.profileImage.name}`)\r\n            .put(this.state.profileImage);\r\n\r\n          uploadTask.on(\r\n            \"state_changed\",\r\n            (snapshot) => {\r\n              const progress = Math.round(\r\n                (snapshot.bytesTransferred / snapshot.totalBytes) * 100\r\n              );\r\n              this.setState({ progressState: progress });\r\n            },\r\n            (error) => {\r\n              console.log(error);\r\n            },\r\n            () => {\r\n              storage\r\n                .ref(\"images\")\r\n                .child(this.state.profileImage.name)\r\n                .getDownloadURL()\r\n                .then((url) => {\r\n                  console.log(url);\r\n                  this.setState({ profileImageURL: url });\r\n                });\r\n            }\r\n          );\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"row\">\r\n          <h5 className=\"col-2 ml-4 mt-2 text-nowrap\">\r\n            {this.props.auth.isAuthenticated  ? (\r\n              <Link to=\"/PublicProfile\" style={{ textDecoration: \"none\" }}>\r\n                View Public Profile\r\n              </Link>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </h5>\r\n        </div>\r\n\r\n        <Form\r\n          model=\"profileForm\"\r\n          onSubmit={(values) => this.handleSubmit(values)}\r\n          className=\"ml-4\"\r\n        >\r\n          <Row className=\"form-group\">\r\n            <Label htmlFor=\"profileImage\" md={2}>\r\n              Owners Id:\r\n            </Label>\r\n            <Col md={10}>\r\n              <Uni uniqueId={this.props.uniqueId} />\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"form-group\">\r\n            <Label htmlFor=\"profileImage\" md={2} className=\"\">\r\n              Profile Image\r\n            </Label>\r\n            <Col md={8}>\r\n              <Control.file\r\n                model=\".profileImage\"\r\n                id=\"profileImage\"\r\n                name=\"profileImage\"\r\n                placeholder=\"Profile Image\"\r\n                className=\"form-control\"\r\n                onChange={this.handleChange}\r\n                style={{ boxShadow: \"0 2px 2px 0 rgba(0, 0, 0, 0.5)\" }}\r\n              />\r\n              <Errors\r\n                className=\"text-danger\"\r\n                model=\".profileImage\"\r\n                show=\"touched\"\r\n                component=\"div\"\r\n              />\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"form-group\">\r\n            <Label htmlFor=\"profileName\" md={2}>\r\n              Profile Name\r\n            </Label>\r\n            <Col md={8}>\r\n              <Control.text\r\n                model=\".profileName\"\r\n                id=\"profileName\"\r\n                name=\"profileName\"\r\n                placeholder={\r\n                  this.props.auth.isAuthenticated \r\n                    ? this.props.auth.user.name\r\n                    : \"\"\r\n                }\r\n                className=\"form-control\"\r\n                style={{ boxShadow: \"0 2px 2px 0 rgba(0, 0, 0, 0.5)\" }}\r\n              />\r\n              <Errors\r\n                className=\"text-danger\"\r\n                model=\".profileName\"\r\n                show=\"touched\"\r\n                component=\"div\"\r\n              />\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"form-group\">\r\n            <Label htmlFor=\"firstName\" md={2}>\r\n              First Name\r\n            </Label>\r\n            <Col md={8}>\r\n              <Control.text\r\n                model=\".firstName\"\r\n                id=\"firstName\"\r\n                name=\"firstName\"\r\n                placeholder=\"First Name\"\r\n                className=\"form-control\"\r\n                style={{ boxShadow: \"0 2px 2px 0 rgba(0, 0, 0, 0.5)\" }}\r\n              />\r\n              <Errors\r\n                className=\"text-danger\"\r\n                model=\".firstName\"\r\n                show=\"touched\"\r\n                component=\"div\"\r\n              />\r\n            </Col>\r\n          </Row>\r\n\r\n          <Row className=\"form-group\">\r\n            <Label htmlFor=\"LastName\" md={2}>\r\n              Last Name\r\n            </Label>\r\n            <Col md={8}>\r\n              <Control.text\r\n                model=\".lastName\"\r\n                id=\"lastName\"\r\n                name=\"lastName\"\r\n                placeholder=\"Last Name\"\r\n                className=\"form-control\"\r\n                style={{ boxShadow: \"0 2px 2px 0 rgba(0, 0, 0, 0.5)\" }}\r\n              />\r\n              <Errors\r\n                className=\"text-danger\"\r\n                model=\".lastName\"\r\n                show=\"touched\"\r\n                component=\"div\"\r\n              />\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"form-group\">\r\n            <Label htmlFor=\"email\" md={2}>\r\n              Email\r\n            </Label>\r\n            <Col md={8}>\r\n              <Control.text\r\n                model=\".email\"\r\n                id=\"email\"\r\n                name=\"email\"\r\n                placeholder={\r\n                  this.props.auth.user.email \r\n                    ? this.props.auth.user.email\r\n                    : \"\"\r\n                }\r\n                className=\"form-control\"\r\n                disabled={true}\r\n              />\r\n              <Errors\r\n                className=\"text-danger\"\r\n                model=\".email\"\r\n                show=\"touched\"\r\n                component=\"div\"\r\n              />\r\n            </Col>\r\n          </Row>\r\n          <Row className=\"form-group\">\r\n            <Label htmlFor=\"ownerAbout\" md={2}>\r\n              Owner About:\r\n            </Label>\r\n            <Col md={8}>\r\n              <Control.textarea\r\n                model=\".ownerAbout\"\r\n                id=\"ownerAbout\"\r\n                name=\"ownerAbout\"\r\n                placeholder=\"About\"\r\n                className=\"form-control\"\r\n                style={{ boxShadow: \"0 2px 2px 0 rgba(0, 0, 0, 0.5)\" }}\r\n                validators={{}}\r\n              />\r\n              <Errors\r\n                className=\"text-danger\"\r\n                model=\".about\"\r\n                show={true}\r\n                component=\"div\"\r\n                messages={{\r\n                  required: \"Required\",\r\n                  maxLength: \"Must be 108 characters or less\",\r\n                }}\r\n              />\r\n            </Col>\r\n          </Row>\r\n\r\n          <Row className=\"form-group\">\r\n            <Col md={{ size: 10, offset: 2 }}>\r\n              <Button type=\"submit\" value=\"submit\" color=\"primary\">\r\n                Save\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n\r\n          <Row className=\"form-group mx-auto align-items-center\">\r\n            <h2\r\n              className=\"mr-2 \"\r\n              style={{\r\n                cursor: \"default\",\r\n                fontFamily: \"Nunito\",\r\n                fontWeight: \"700\",\r\n              }}\r\n            >\r\n              Pets\r\n            </h2>\r\n\r\n            <AddPet addPetCard={this.props.addPetCard} addPet={this.props.addPet} getPets={this.props.getPets}/>\r\n\r\n            <Col className=\"mx-auto \"></Col>\r\n          </Row>\r\n        </Form>\r\n\r\n        <div className=\"container\">\r\n          <div\r\n            className=\"row row-content justify-content-around\"\r\n            style={{ color: \"black\" }}\r\n          >\r\n            {/* <ProfilePet\r\n              petcard={this.props.petcard}\r\n              uniqueId={this.props.uniqueId}\r\n              pet={this.props.pet}\r\n            /> */}\r\n\r\n\r\n\r\n{ this.props.pet.pets.length === 0? <div></div>:\r\n\r\n!this.props.pet.pets.mydata.length > 0 ? <div></div>:\r\n\r\n  this.props.pet.pets.mydata.map((pet, index) => {\r\n    return (\r\n      <div\r\n        key={index}\r\n        className=\"flip-card-container mx-auto pr-3 pr-md-0 mb-5\"\r\n      >\r\n        <div className=\"flip-card \">\r\n          <div\r\n            className=\"flip-card-front rounded-lg text-center\"\r\n            style={{ color: \"black\" }}\r\n          >\r\n            <div style={{ fontFamily: \"Fredoka One\", fontWeight: \"400\" }}>\r\n              {pet.name}\r\n            </div>\r\n            {pet.petImage === \"\" ? (\r\n              <img\r\n                id=\"profile\"\r\n                className=\"profileImg \"\r\n                src=\"/petbook/assets/petDefault.png\"\r\n                alt=\"profileImg\"\r\n                style={{ width: \"90%\", maxWidth: \"100%\", height: \"90%\" }}\r\n              ></img>\r\n            ) : (\r\n              <img\r\n                id=\"profile\"\r\n                className=\"profileImg \"\r\n                src={pet.petImage}\r\n                alt=\"profileImg\"\r\n                style={{ width: \"90%\", maxWidth: \"100%\", height: \"90%\" }}\r\n              ></img>\r\n            )}\r\n          </div>\r\n          <div className=\"flip-card-back rounded-lg \">\r\n            <Card\r\n              style={{ height: \"100%\", width: \"100%\", overflow: \"hidden\" }}\r\n              className=\"d-flex flex-column \"\r\n            >\r\n              <CardTitle\r\n                style={{\r\n                  border: \"1px solid #1b8eb1\",\r\n                  backgroundColor: \"#1b8eb1\",\r\n                  color: \"white\",\r\n                }}\r\n              >\r\n                <h5>Pet Info</h5>\r\n              </CardTitle>\r\n              <CardBody>\r\n                <div className=\"d-flex flex-column  justify-content-around \">\r\n                  <Row\r\n                    className=\" \"\r\n                    style={{\r\n                      backgroundColor: \"white\",\r\n                      border: \"1px solid #1b8eb1\",\r\n                    }}\r\n                  >\r\n                    <Col\r\n                      md={4}\r\n                      className=\"text-left d-flex align-items-center\"\r\n                      style={{\r\n                        border: \"1px solid #1b8eb1\",\r\n                        backgroundColor: \"#1b8eb1\",\r\n                        color: \"white\",\r\n                      }}\r\n                    >\r\n                      Type:\r\n                    </Col>\r\n                    <Col className=\"\">{pet.animalType}</Col>\r\n                  </Row>\r\n\r\n                  <Row\r\n                    className=\" \"\r\n                    style={{\r\n                      backgroundColor: \"white\",\r\n                      border: \"1px solid #1b8eb1\",\r\n                    }}\r\n                  >\r\n                    <Col\r\n                      md={4}\r\n                      className=\"text-left d-flex align-items-center\"\r\n                      style={{\r\n                        border: \"1px solid #1b8eb1\",\r\n                        backgroundColor: \"#1b8eb1\",\r\n                        color: \"white\",\r\n                      }}\r\n                    >\r\n                      Breed:\r\n                    </Col>\r\n                    <Col className=\"\">{pet.breed}</Col>\r\n                  </Row>\r\n\r\n                  <Row\r\n                    className=\" \"\r\n                    style={{\r\n                      backgroundColor: \"white\",\r\n                      border: \"1px solid #1b8eb1\",\r\n                    }}\r\n                  >\r\n                    <Col\r\n                      md={4}\r\n                      className=\"text-left d-flex align-items-center\"\r\n                      style={{\r\n                        border: \"1px solid #1b8eb1\",\r\n                        backgroundColor: \"#1b8eb1\",\r\n                        color: \"white\",\r\n                      }}\r\n                    >\r\n                      Main Color:\r\n                    </Col>\r\n                    <Col className=\"\">{pet.mainColor}</Col>\r\n                  </Row>\r\n\r\n                  <Row\r\n                    className=\" \"\r\n                    style={{\r\n                      backgroundColor: \"white\",\r\n                      border: \"1px solid #1b8eb1\",\r\n                    }}\r\n                  >\r\n                    <Col\r\n                      md={4}\r\n                      className=\"text-left d-flex align-items-center\"\r\n                      style={{\r\n                        border: \"1px solid #1b8eb1\",\r\n                        backgroundColor: \"#1b8eb1\",\r\n                        color: \"white\",\r\n                      }}\r\n                    >\r\n                      Secondary Color:\r\n                    </Col>\r\n                    <Col className=\"\">{pet.secondaryColor}</Col>\r\n                  </Row>\r\n\r\n                  <Row\r\n                    className=\" \"\r\n                    style={{\r\n                      backgroundColor: \"white\",\r\n                      border: \"1px solid #1b8eb1\",\r\n                    }}\r\n                  >\r\n                    <Col\r\n                      md={4}\r\n                      className=\"text-left d-flex align-items-center\"\r\n                      style={{\r\n                        border: \"1px solid #1b8eb1\",\r\n                        backgroundColor: \"#1b8eb1\",\r\n                        color: \"white\",\r\n                      }}\r\n                    >\r\n                      Animals Id:{\" \"}\r\n                    </Col>\r\n                    <Col className=\"\">{pet._id}</Col>\r\n                  </Row>\r\n                </div>\r\n                <div className=\"d-flex flex-column  justify-content-around \">\r\n                  <Row\r\n                    className=\" d-flex flex-column align-items-stretch \"\r\n                    style={{\r\n                      border: \"1px solid #1b8eb1\",\r\n                      backgroundColor: \"#1b8eb1\",\r\n                      color: \"white\",\r\n                    }}\r\n                  >\r\n                    About:\r\n                  </Row>\r\n                </div>\r\n\r\n                <Row\r\n                  className=\"d-flex flex-column\"\r\n                  style={{ height: \"38%\", width: \"108.4%\" }}\r\n                >\r\n                  <div\r\n                    className=\"d-flex flex-column  text-break text-wrap overflow-auto\"\r\n                    style={{\r\n                      backgroundColor: \"white\",\r\n                      border: \"1px solid #1b8eb1\",\r\n                    }}\r\n                  >\r\n                    {pet.about}\r\n                  </div>\r\n                </Row>\r\n              </CardBody>\r\n            </Card>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  })\r\n\r\n//:<div>Hello</div>\r\n}\r\n\r\n\r\n          </div>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PetProfile;\r\n","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\App.js",["172"],"import React from \"react\";\nimport \"./App.css\";\nimport Main from \"./components/MainComponent\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport { ConfigureStore } from \"./redux/configureStore\";\nimport { setCurrentUser,logoutUser } from \"./redux/ActionCreators\";\nimport setAuthToken from \"./utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\n\nconst store = ConfigureStore();\n\nif (localStorage.jwtToken) {\n  // Set auth token header auth\n  const token = localStorage.jwtToken;\n  setAuthToken(token);\n  // Decode token and get user info and exp\n  const decoded = jwt_decode(token);\n  // Set user and isAuthenticated\n  store.dispatch(setCurrentUser(decoded));\n// Check for expired token\n  const currentTime = Date.now() / 1000; // to get in milliseconds\n  if (decoded.exp < currentTime) {\n    // Logout user\n    store.dispatch(logoutUser());\n    // Redirect to login\n    window.location.href = \"./login\";\n  }\n}\nfunction App() {\n  return (\n    <Provider store={store}>\n      <BrowserRouter basename=\"/petbook\" >\n        <div className=\"App\">\n          <Main />\n        </div>\n      </BrowserRouter>\n    </Provider>\n  );\n}\n\nexport default App;\n","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\components\\login.js",["173","174","175","176"],"import React, { Component } from \"react\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { loginUser } from \"../redux/ActionCreators\";\r\nimport classnames from \"classnames\";\r\nimport { Control, Form } from \"react-redux-form\";\r\nimport {\r\n    Button,\r\n    Label,\r\n    Row,\r\n    Col,\r\n  } from \"reactstrap\";\r\nclass Login extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      email: \"\",\r\n      password: \"\",\r\n      errors: {}\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    //If logged in and user navigates to Login page, should redirect them to dashboard\r\n    // if (this.props.auth.isAuthenticated) {\r\n    //   this.props.history.push(\"/petbook\");\r\n    //   this.props.toggleModal()\r\n    //   alert(\"Already Loged In\")\r\n    // }\r\n  }\r\ncomponentWillReceiveProps(nextProps) {\r\n    if (nextProps.auth.isAuthenticated) {\r\n      //this.props.history.push(\"/Feed\"); // push user to dashboard when they login\r\n      this.props.toggleModal()\r\n    }\r\nif (nextProps.errors) {\r\n      this.setState({\r\n        errors: nextProps.errors\r\n      });\r\n    }\r\n  }\r\nonChange = e => {\r\n    this.setState({ [e.target.id]: e.target.value });\r\n  };\r\nonSubmit = e => {\r\n    //e.preventDefault();\r\n  \r\n  //    if(this.state.email != \"\"){\r\n  //       this.setState({\r\n\r\n  //           errors: this.props.errors.email = null\r\n  //         });\r\n  //   }\r\n  //  if(this.state.password != \"\"){\r\n  //       this.setState({\r\n\r\n  //           errors: this.props.errors.password = null,\r\n  //         });\r\n  //   }\r\n// if (this.props.auth.isAuthenticated === true){\r\n//   this.props.toggleModal()\r\n// }\r\n\r\nconst userData = {\r\n      email: this.state.email,\r\n      password: this.state.password\r\n    };\r\nthis.props.loginUser(userData); // since we handle the redirect within our component, we don't need to pass in this.props.history as a parameter\r\n  };\r\nrender() {\r\n    const { errors } = this.state;\r\nreturn (\r\n\r\n    <Form\r\n    model=\"profileForm\"\r\n    onSubmit={(values) => this.onSubmit(values)}\r\n    className=\"mt-2\"\r\n  >\r\n   \r\n    <Row className=\"form-group \">\r\n      <Col>\r\n        <Label htmlFor=\"email\" className=\"ml-3\">\r\n          Email:\r\n        </Label>\r\n\r\n        <Col md={10}>\r\n          <Control.text\r\n            model=\".email\"\r\n            id=\"email\"\r\n            name=\"email\"\r\n            placeholder=\"email\"\r\n         \r\n            onChange={this.onChange}\r\n            value={this.state.email}\r\n            className={classnames(\"form-control\", {\r\n              invalid: errors.email\r\n               })}\r\n\r\n          />\r\n    <span className=\"text-danger m-1\">{errors.email}</span>\r\n        </Col>\r\n      </Col>\r\n    </Row>\r\n    <Row className=\"form-group \">\r\n      <Col>\r\n        <Label htmlFor=\"password\" className=\"ml-3\">\r\n          Password:\r\n        </Label>\r\n\r\n        <Col md={10}>\r\n          <Control.text\r\n            model=\".password\"\r\n            id=\"password\"\r\n            name=\"password\"\r\n            placeholder=\"password\"\r\n\r\n            onChange={this.onChange}\r\n            value={this.state.password}\r\n            error={errors.password}\r\n            className={classnames(\"form-control\", {\r\n              invalid: errors.password || errors.passwordincorrect\r\n               })}\r\n          />\r\n          <span className=\"text-danger m-1\">{errors.password}\r\n                   {errors.passwordincorrect}</span>\r\n        </Col>\r\n      </Col>\r\n    </Row>\r\n       <Button type=\"submit\" value=\"submit\" color=\"primary\">\r\n      Login\r\n    </Button>\r\n  </Form>\r\n    );\r\n  }\r\n}\r\nLogin.propTypes = {\r\n  loginUser: PropTypes.func.isRequired,\r\n  auth: PropTypes.object.isRequired,\r\n  errors: PropTypes.object.isRequired\r\n};\r\nconst mapStateToProps = state => ({\r\n  auth: state.auth,\r\n  errors: state.errors\r\n});\r\nexport default connect(\r\n  mapStateToProps,\r\n  { loginUser }\r\n)(Login);",["177","178"],"C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\petCard.js",[],"C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\petForm.js",[],"C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\postReducer.js",["179","180"],"import {\r\n    ADD_USER_POST,\r\n    GET_USER_POST\r\n  } from \"./ActionTypes\";\r\n  const isEmpty = require(\"is-empty\");\r\n  const initialState = {\r\n    title: \"\",\r\n    body: \"\",\r\n    loading: false\r\n  };\r\n  export const postReducer = (state = { post: [] }, action)=> {\r\n    switch (action.type) {\r\n        case ADD_USER_POST:\r\n            return {\r\n              ...state,\r\n              post:state.post.mypost\r\n             // title: action.payload.data.post.title,\r\n            //  body: action.payload.data.post.body\r\n              // post:state.post.reverse().concat(action.payload).reverse()\r\n            };\r\n            case GET_USER_POST:\r\n              return {\r\n                ...state,\r\n                post:action.payload.data\r\n               // title: action.payload.data.post.title,\r\n              //  body: action.payload.data.post.body\r\n                // post:state.post.reverse().concat(action.payload).reverse()\r\n              };\r\n          default:\r\n            return state;      \r\n    }\r\n  }","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\userInfoDBReducer.js",["181"],"import {\r\n    ADD_USER_INFODB,\r\n    UPDATE_USER_INFODB,\r\n    GET_USER_INFODB\r\n  } from \"./ActionTypes\";\r\n  const isEmpty = require(\"is-empty\");\r\n\r\n  export const userInfoDBReducer = (state = { userInfodb: [] }, action)=> {\r\n    switch (action.type) {\r\n        case ADD_USER_INFODB:\r\n            return {\r\n              ...state,\r\n              userInfodb:action.payload.data\r\n\r\n            };\r\n            case UPDATE_USER_INFODB:\r\n              return {\r\n                ...state,\r\n                userInfodb:action.payload.data\r\n\r\n              };\r\n              case GET_USER_INFODB:\r\n              return {\r\n                ...state,\r\n                userInfodb:action.payload.data\r\n\r\n              };\r\n          default:\r\n            return state;      \r\n    }\r\n  }","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\petReducer.js",["182"],{"ruleId":"183","replacedBy":"184"},{"ruleId":"185","replacedBy":"186"},{"ruleId":"183","replacedBy":"187"},{"ruleId":"185","replacedBy":"188"},{"ruleId":"189","severity":1,"message":"190","line":11,"column":3,"nodeType":"191","messageId":"192","endLine":11,"endColumn":8},{"ruleId":"189","severity":1,"message":"193","line":25,"column":3,"nodeType":"191","messageId":"192","endLine":25,"endColumn":6},{"ruleId":"189","severity":1,"message":"194","line":26,"column":3,"nodeType":"191","messageId":"192","endLine":26,"endColumn":6},{"ruleId":"189","severity":1,"message":"195","line":30,"column":10,"nodeType":"191","messageId":"192","endLine":30,"endColumn":17},{"ruleId":"189","severity":1,"message":"196","line":30,"column":19,"nodeType":"191","messageId":"192","endLine":30,"endColumn":23},{"ruleId":"189","severity":1,"message":"197","line":30,"column":25,"nodeType":"191","messageId":"192","endLine":30,"endColumn":31},{"ruleId":"198","severity":1,"message":"199","line":135,"column":15,"nodeType":"200","endLine":138,"endColumn":16},{"ruleId":"183","replacedBy":"201"},{"ruleId":"185","replacedBy":"202"},{"ruleId":"203","severity":1,"message":"204","line":142,"column":17,"nodeType":"200","endLine":153,"endColumn":19},{"ruleId":"203","severity":1,"message":"205","line":157,"column":19,"nodeType":"200","endLine":164,"endColumn":21},{"ruleId":"189","severity":1,"message":"206","line":178,"column":7,"nodeType":"191","messageId":"192","endLine":178,"endColumn":14},{"ruleId":"189","severity":1,"message":"207","line":16,"column":7,"nodeType":"191","messageId":"192","endLine":16,"endColumn":19},{"ruleId":"189","severity":1,"message":"208","line":13,"column":7,"nodeType":"191","messageId":"192","endLine":13,"endColumn":15},{"ruleId":"209","severity":1,"message":"210","line":105,"column":13,"nodeType":"200","endLine":110,"endColumn":14},{"ruleId":"189","severity":1,"message":"211","line":2,"column":10,"nodeType":"191","messageId":"192","endLine":2,"endColumn":14},{"ruleId":"203","severity":1,"message":"212","line":102,"column":11,"nodeType":"200","endLine":112,"endColumn":13},{"ruleId":"203","severity":1,"message":"212","line":124,"column":11,"nodeType":"200","endLine":136,"endColumn":13},{"ruleId":"203","severity":1,"message":"212","line":148,"column":11,"nodeType":"200","endLine":160,"endColumn":13},{"ruleId":"203","severity":1,"message":"212","line":172,"column":11,"nodeType":"200","endLine":184,"endColumn":13},{"ruleId":"189","severity":1,"message":"213","line":7,"column":3,"nodeType":"191","messageId":"192","endLine":7,"endColumn":16},{"ruleId":"214","severity":1,"message":"215","line":108,"column":3,"nodeType":"216","messageId":"217","endLine":111,"endColumn":4},{"ruleId":"203","severity":1,"message":"212","line":214,"column":21,"nodeType":"200","endLine":221,"endColumn":23},{"ruleId":"203","severity":1,"message":"212","line":236,"column":21,"nodeType":"200","endLine":243,"endColumn":23},{"ruleId":"203","severity":1,"message":"212","line":125,"column":19,"nodeType":"200","endLine":132,"endColumn":21},{"ruleId":"203","severity":1,"message":"205","line":147,"column":19,"nodeType":"200","endLine":155,"endColumn":21},{"ruleId":"203","severity":1,"message":"212","line":169,"column":19,"nodeType":"200","endLine":176,"endColumn":21},{"ruleId":"203","severity":1,"message":"212","line":191,"column":19,"nodeType":"200","endLine":198,"endColumn":21},{"ruleId":"203","severity":1,"message":"212","line":213,"column":19,"nodeType":"200","endLine":220,"endColumn":21},{"ruleId":"203","severity":1,"message":"212","line":235,"column":19,"nodeType":"200","endLine":242,"endColumn":21},{"ruleId":"203","severity":1,"message":"204","line":256,"column":19,"nodeType":"200","endLine":264,"endColumn":21},{"ruleId":"203","severity":1,"message":"205","line":423,"column":15,"nodeType":"200","endLine":431,"endColumn":17},{"ruleId":"203","severity":1,"message":"212","line":445,"column":15,"nodeType":"200","endLine":456,"endColumn":17},{"ruleId":"203","severity":1,"message":"212","line":470,"column":15,"nodeType":"200","endLine":477,"endColumn":17},{"ruleId":"203","severity":1,"message":"212","line":492,"column":15,"nodeType":"200","endLine":499,"endColumn":17},{"ruleId":"203","severity":1,"message":"212","line":513,"column":15,"nodeType":"200","endLine":524,"endColumn":17},{"ruleId":"203","severity":1,"message":"204","line":538,"column":15,"nodeType":"200","endLine":546,"endColumn":17},{"ruleId":"189","severity":1,"message":"218","line":10,"column":10,"nodeType":"191","messageId":"192","endLine":10,"endColumn":21},{"ruleId":"189","severity":1,"message":"211","line":2,"column":10,"nodeType":"191","messageId":"192","endLine":2,"endColumn":14},{"ruleId":"189","severity":1,"message":"219","line":2,"column":16,"nodeType":"191","messageId":"192","endLine":2,"endColumn":26},{"ruleId":"203","severity":1,"message":"212","line":87,"column":11,"nodeType":"200","endLine":99,"endColumn":13},{"ruleId":"203","severity":1,"message":"212","line":111,"column":11,"nodeType":"200","endLine":123,"endColumn":13},{"ruleId":"183","replacedBy":"220"},{"ruleId":"185","replacedBy":"221"},{"ruleId":"189","severity":1,"message":"222","line":5,"column":9,"nodeType":"191","messageId":"192","endLine":5,"endColumn":16},{"ruleId":"189","severity":1,"message":"207","line":6,"column":9,"nodeType":"191","messageId":"192","endLine":6,"endColumn":21},{"ruleId":"189","severity":1,"message":"222","line":6,"column":9,"nodeType":"191","messageId":"192","endLine":6,"endColumn":16},{"ruleId":"189","severity":1,"message":"222","line":6,"column":9,"nodeType":"191","messageId":"192","endLine":6,"endColumn":16},"no-native-reassign",["223"],"no-negated-in-lhs",["224"],["223"],["224"],"no-unused-vars","'Label' is defined but never used.","Identifier","unusedVar","'Row' is defined but never used.","'Col' is defined but never used.","'Control' is defined but never used.","'Form' is defined but never used.","'Errors' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["223"],["224"],"react/jsx-pascal-case","Imported JSX component textarea must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component file must be in PascalCase or SCREAMING_SNAKE_CASE","'apiPser' is assigned a value but never used.","'initialState' is assigned a value but never used.","'apiPosts' is assigned a value but never used.","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","'Link' is defined but never used.","Imported JSX component text must be in PascalCase or SCREAMING_SNAKE_CASE","'BrowserRouter' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'PersistGate' is defined but never used.","'withRouter' is defined but never used.",["223"],["224"],"'isEmpty' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]