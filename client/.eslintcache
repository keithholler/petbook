[{"C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\index.js":"1","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\reportWebVitals.js":"2","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\components\\HeaderComponent.js":"3","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\uniqueId.js":"4","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\profileForm.js":"5","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\components\\FeedComponent.js":"6","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\ActionCreators.js":"7","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\ActionTypes.js":"8","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\firebase\\index.js":"9","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\configureStore.js":"10","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\userInfo.js":"11","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\lostPetForm.js":"12","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\components\\PublicProfile.js":"13","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\components\\SheltersComponent.js":"14","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\errorReducer.js":"15","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\authReducer.js":"16","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\components\\register.js":"17","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\utils\\setAuthToken.js":"18","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\post.js":"19","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\components\\MainComponent.js":"20","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\components\\LostpetsComponent.js":"21","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\components\\PetProfileComponent.js":"22","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\App.js":"23","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\components\\login.js":"24","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\petCard.js":"25","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\petForm.js":"26","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\postReducer.js":"27","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\userInfoDBReducer.js":"28"},{"size":640,"mtime":1609767643255,"results":"29","hashOfConfig":"30"},{"size":362,"mtime":1608153980176,"results":"31","hashOfConfig":"30"},{"size":17154,"mtime":1615902639995,"results":"32","hashOfConfig":"30"},{"size":287,"mtime":1608672902983,"results":"33","hashOfConfig":"30"},{"size":144,"mtime":1609274912556,"results":"34","hashOfConfig":"30"},{"size":17976,"mtime":1616792501051,"results":"35","hashOfConfig":"30"},{"size":4969,"mtime":1616695369600,"results":"36","hashOfConfig":"30"},{"size":566,"mtime":1616694209401,"results":"37","hashOfConfig":"30"},{"size":600,"mtime":1613758166614,"results":"38","hashOfConfig":"30"},{"size":1729,"mtime":1616792214599,"results":"39","hashOfConfig":"30"},{"size":272,"mtime":1608730788512,"results":"40","hashOfConfig":"30"},{"size":70,"mtime":1609345216689,"results":"41","hashOfConfig":"30"},{"size":15725,"mtime":1616699203018,"results":"42","hashOfConfig":"30"},{"size":454,"mtime":1609853654631,"results":"43","hashOfConfig":"30"},{"size":254,"mtime":1615410862637,"results":"44","hashOfConfig":"30"},{"size":626,"mtime":1616003295189,"results":"45","hashOfConfig":"30"},{"size":5484,"mtime":1615901692595,"results":"46","hashOfConfig":"30"},{"size":338,"mtime":1615218456090,"results":"47","hashOfConfig":"30"},{"size":315,"mtime":1616181426111,"results":"48","hashOfConfig":"30"},{"size":8287,"mtime":1616782681674,"results":"49","hashOfConfig":"30"},{"size":9230,"mtime":1616789696613,"results":"50","hashOfConfig":"30"},{"size":24572,"mtime":1616789109246,"results":"51","hashOfConfig":"30"},{"size":1192,"mtime":1616792224101,"results":"52","hashOfConfig":"30"},{"size":3883,"mtime":1615901847609,"results":"53","hashOfConfig":"30"},{"size":290,"mtime":1608936039638,"results":"54","hashOfConfig":"30"},{"size":145,"mtime":1609852026604,"results":"55","hashOfConfig":"30"},{"size":1007,"mtime":1616695895110,"results":"56","hashOfConfig":"30"},{"size":770,"mtime":1616616477402,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"tehkno",{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"67"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"109","messages":"110","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"67"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"67"},"C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\index.js",[],["124","125"],"C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\reportWebVitals.js",[],["126","127"],"C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\components\\HeaderComponent.js",["128","129","130","131","132","133","134"],"import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link, NavLink as RRNavLink } from \"react-router-dom\";\r\nimport uuid from \"react-uuid\";\r\nimport {\r\n  Nav,\r\n  NavbarBrand,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  Label,\r\n  NavItem,\r\n  TabContent,\r\n  TabPane,\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavLink,\r\n  UncontrolledDropdown,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  Button,\r\n  UncontrolledTooltip,\r\n  Row,\r\n  Col,\r\n} from \"reactstrap\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport classnames from \"classnames\";\r\nimport { Control, Form, Errors } from \"react-redux-form\";\r\nimport Register from \"./register\"\r\nimport Login from \"./login\"\r\nimport { logoutUser } from \"../redux/ActionCreators\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass Header extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      collapsed: true,\r\n      isNavOpen: false,\r\n      isModalOpen: false,\r\n      isPetIdModalOpen: false,\r\n      activeTab: \"1\",\r\n    };\r\n  }\r\n\r\n  // handleLogin = (values) => {\r\n  //   if (values.email) {\r\n  //     alert(\"Logged In\");\r\n  //   } else {\r\n  //     alert(\"Please Register First\");\r\n  //   }\r\n  //   this.toggleModal();\r\n  // };\r\n\r\n  // handleRegister = (values) => {\r\n  //   this.props.addUserInfo(\r\n  //     this.props.uniqueId.uniqueId,\r\n  //     \"localImageUrl\",\r\n  //     values,\r\n  //     true\r\n  //   );\r\n  //   this.toggleModal();\r\n  //   this.toggleModalPetId();\r\n  //   this.generateId();\r\n  // };\r\n\r\n  \r\n  toggleModal = () => {\r\n\r\n    this.setState({\r\n      isModalOpen: !this.state.isModalOpen,\r\n    });\r\n  };\r\n  generateId = () => {\r\n    this.props.addUniqueId(uuid());\r\n  };\r\n  toggleModalPetId = () => {\r\n    this.setState(\r\n      {\r\n        isPetIdModalOpen: true,\r\n      },\r\n      () => {\r\n        setTimeout(this.handleClose, 3000);\r\n      }\r\n    );\r\n  };\r\n\r\n  handleClose = () => {\r\n    this.setState({\r\n      isPetIdModalOpen: false,\r\n    });\r\n  };\r\n\r\n  toggleNav = () => {\r\n    this.setState({\r\n      collapsed: !this.state.collapsed,\r\n    });\r\n  };\r\n\r\n  toggleTab = (tab) => {\r\n    if (this.state.activeTab !== tab) {\r\n      this.setState({ activeTab: tab });\r\n    }\r\n  };\r\n  onLogoutClick = () => {\r\n   this.props.logoutUser();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Navbar\r\n          id=\"navbar\"\r\n          className=\"site-header \"\r\n          expand=\"md\"\r\n          style={{ boxShadow: \"0 4px 4px 0 rgba(0, 0, 0, 0.5)\" }}\r\n          light\r\n        >\r\n          <NavbarBrand tag={RRNavLink} to=\"/petbook\" className=\"ml-4\" style={{ color: \"white\" }}>\r\n            <h5\r\n              style={{\r\n                fontSize: \"40px\",\r\n                textShadow: \"1px 1px 3px #363636\",\r\n                fontFamily: \"Fredoka One\",\r\n                fontWeight: \"200\",\r\n              }}\r\n            >\r\n              PetB\r\n              <img\r\n                src=\"/petbook/assets/pawprint2.png\"\r\n                style={{ width: \"40px\", margin: \"3px\" }}\r\n              ></img>\r\n              k\r\n            </h5>\r\n          </NavbarBrand>\r\n          <NavbarToggler onClick={this.toggleNav} className=\"mr-2 hamburger\" />\r\n          <Collapse isOpen={!this.state.collapsed} navbar>\r\n            <Nav navbar className=\"mx-auto\">\r\n              <NavItem className=\"mr-5 ml-4\">\r\n                <NavLink\r\n                  tag={RRNavLink}\r\n                 \r\n                  style={{\r\n                    fontWeight: \"bold\",\r\n                    color: \"white\",\r\n                  }}\r\n                  to=\"/LostPets\"\r\n                  onClick={!this.state.collapsed ? this.toggleNav : \"\"}\r\n                  activeStyle={{\r\n                    fontWeight: \"900\",\r\n                    color: \"white\",\r\n                    textDecoration: \"underline\",\r\n                    \r\n                  }}\r\n                >\r\n                  <img\r\n                    src=\"/petbook/assets/lostFound.png\"\r\n                    alt=\"lostPets\"\r\n                    style={{\r\n                      width: \"30px\",\r\n                      height: \"30px\",\r\n                      position: \"relative\",\r\n                      margin: \"3px\",\r\n                      display: \"inline-block\" \r\n                    }}\r\n                    className=\"align-bottom\"\r\n                  />\r\n\r\n                  <span\r\n                    style={{ display: \"inline\" }}\r\n                    className=\"text-nowrap align-bottom\"\r\n                  >\r\n                    Lost & Found\r\n                  </span>\r\n                </NavLink>\r\n              </NavItem>\r\n              <NavItem className=\"mr-5 ml-4\">\r\n                <NavLink\r\n                  tag={RRNavLink}\r\n                  onClick={!this.state.collapsed ? this.toggleNav : \"\"}\r\n                  to=\"/Feed\"\r\n                  style={{\r\n                    fontWeight: \"bold\",\r\n                    color: \"white\",\r\n                  }}\r\n                  activeStyle={{\r\n                    fontWeight: \"900\",\r\n                    color: \"white\",\r\n                    textDecoration: \"underline\",\r\n                  }}\r\n                \r\n                >\r\n                  <img\r\n                    src=\"/petbook/assets/home4.png\"\r\n                    alt=\"feed\"\r\n                    style={{\r\n                      width: \"30px\",\r\n                      height: \"30px\",\r\n                      position: \"relative\",\r\n                      margin: \"3px\",\r\n                      display: \"inline-block\" \r\n                    }}\r\n                    className=\"align-bottom\"\r\n                  />\r\n                  <span\r\n                    style={{ display: \"inline\" }}\r\n                    className=\"text-nowrap align-bottom\"\r\n                  >\r\n                    Home\r\n                  </span>\r\n                </NavLink>\r\n              </NavItem>\r\n            </Nav>\r\n            <UncontrolledDropdown inNavbar>\r\n            <DropdownToggle nav caret style={{ color: \"white\" }} className=\"dropdownTogglePosition\">\r\n              Profile\r\n              {typeof this.props.userInfo.userInfo.profileInfo ===\r\n                \"undefined\" ||\r\n              this.props.userInfo.userInfo.userPick === \"localImageUrl\" ||\r\n              this.props.userInfo.userInfo.userPick === \"\" ? (\r\n                <img\r\n                  id=\"proPic\"\r\n                  className=\"profileImg rounded-circle ml-3\"\r\n                  src=\"/petbook/assets/default.png\"\r\n                  alt=\"profileImg\"\r\n                  style={{ width: \"40px\" }}\r\n                />\r\n              ) : (\r\n                <img\r\n                  id=\"proPic\"\r\n                  className=\"profileImg rounded-circle ml-3\"\r\n                  src={this.props.userInfo.userInfo.userPick}\r\n                  alt=\"profileImg\"\r\n                  style={{ width: \"40px\" }}\r\n                />\r\n              )}\r\n            </DropdownToggle >\r\n              <DropdownMenu className=\"dropdownPosition\">\r\n                <NavItem className=\"\">\r\n                  {this.props.auth.isAuthenticated ? (\r\n                    <Link style={{ color: \"black\" }} to=\"/PetProfile\">\r\n                      <DropdownItem id=\"profileSettings\">\r\n                        {typeof this.props.userInfo.userInfo.profileInfo ===\r\n                          \"undefined\" ||\r\n                        this.props.userInfo.userInfo.userPick ===\r\n                          \"localImageUrl\" ||\r\n                        this.props.userInfo.userInfo.userPick === \"\" ? (\r\n                          <img\r\n                            id=\"proPic\"\r\n                            className=\"profileImg rounded-circle mr-1\"\r\n                            src=\"/petbook/assets/default.png\" \r\n                            alt=\"profileImg\"\r\n                            style={{\r\n                              width: \"40px\",\r\n                              objectFit: \"cover\",\r\n                              objectPosition: \"50% 50%\",\r\n                             \r\n                            }}\r\n                          />\r\n                        ) : (\r\n                          <img\r\n                            id=\"proPic\"\r\n                            className=\"profileImg rounded-circle mr-2\"\r\n                            src={this.props.userInfo.userInfo.userPick}\r\n                            alt=\"profileImg\"\r\n                            style={{\r\n                              width: \"40px\",\r\n                              objectFit: \"cover\",\r\n                              objectPosition: \"50% 50%\",\r\n                            }}\r\n                          />\r\n                        )}\r\n                        Your Profile\r\n                      </DropdownItem>\r\n                      <UncontrolledTooltip\r\n                        placement=\"left\"\r\n                        target=\"profileSettings\"\r\n                      >\r\n                        Profile and Settings\r\n                      </UncontrolledTooltip>\r\n                    </Link>\r\n                  ) : (\r\n                    <Link style={{ color: \"black\" }} to=\"/\">\r\n                      <DropdownItem id=\"profileSettings\" className=\"text-center m-0\">\r\n                        <img\r\n                          className=\"profileImg rounded-circle mr-1\"\r\n                          src=\"/petbook/assets/default.png\"\r\n                          alt=\"profileImg\"\r\n                          style={{\r\n                            width: \"40px\",\r\n                            objectFit: \"cover\",\r\n                            objectPosition: \"50% 50%\",\r\n                          }}\r\n                        />\r\n                        Your Profile\r\n                      </DropdownItem>\r\n                      <UncontrolledTooltip\r\n                        placement=\"left\"\r\n                        target=\"profileSettings\"\r\n                      >\r\n                        Profile and Settings\r\n                      </UncontrolledTooltip>\r\n                    </Link>\r\n                  )}\r\n                </NavItem>\r\n                <DropdownItem divider />\r\n                <DropdownItem>Settings</DropdownItem>\r\n                <DropdownItem>Help</DropdownItem>\r\n                <DropdownItem>\r\n                  <span className=\"navbar-text ml-2\">\r\n                    <Button color=\"primary\" onClick={this.toggleModal}>\r\n                      <i className=\"fa fa-sign-in fa-lg\" /> Login\r\n                    </Button>\r\n                  </span>\r\n                  <span className=\"navbar-text ml-2\">\r\n                    <Button color=\"primary\" onClick={this.onLogoutClick}>\r\n                      <i className=\"fa fa-sign-in fa-lg\" /> Logout\r\n                    </Button>\r\n                  </span>\r\n                </DropdownItem>\r\n              </DropdownMenu>\r\n              \r\n          </UncontrolledDropdown>\r\n          </Collapse>\r\n          \r\n          \r\n        \r\n        </Navbar>\r\n\r\n        <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>\r\n          <ModalHeader\r\n            toggle={this.toggleModal}\r\n            style={{\r\n              backgroundColor: \"#1b8eb1\",\r\n              color: \"white\",\r\n              textShadow: \"1px 1px 3px #363636\",\r\n              fontFamily: \"Nunit, sans-serif\",\r\n              fontWeight: \"bold\",\r\n            }}\r\n          >\r\n            Login\r\n          </ModalHeader>\r\n          <ModalBody>\r\n            <Nav tabs>\r\n              <NavItem>\r\n                <NavLink\r\n                  className={classnames({\r\n                    active: this.state.activeTab === \"1\",\r\n                  })}\r\n                  onClick={() => {\r\n                    this.toggleTab(\"1\");\r\n                  }}\r\n                  href=\"#\"\r\n                >\r\n                  Log In\r\n                </NavLink>\r\n              </NavItem>\r\n              <NavItem>\r\n                <NavLink\r\n                  className={classnames({\r\n                    active: this.state.activeTab === \"2\",\r\n                  })}\r\n                  onClick={() => {\r\n                    this.toggleTab(\"2\");\r\n                  }}\r\n                  href=\"#\"\r\n                >\r\n                  Register\r\n                </NavLink>\r\n              </NavItem>\r\n            </Nav>\r\n            <TabContent activeTab={this.state.activeTab}>\r\n              <TabPane tabId=\"1\">\r\n              <Login toggleModal={this.toggleModal} addUserInfo={this.props.addUserInfo}/>\r\n                {/* <Form\r\n                  model=\"profileForm\"\r\n                  onSubmit={(values) => this.handleLogin(values)}\r\n                  className=\"mt-2\"\r\n                >\r\n                  <Row className=\"form-group \">\r\n                    <Col>\r\n                      <Label htmlFor=\"email\" className=\"ml-3\">\r\n                        Email:\r\n                      </Label>\r\n\r\n                      <Col md={10}>\r\n                        <Control.text\r\n                          model=\".email\"\r\n                          id=\"email\"\r\n                          name=\"email\"\r\n                          placeholder=\"email\"\r\n                          className=\"form-control\"\r\n                        />\r\n                      </Col>\r\n                    </Col>\r\n                  </Row>\r\n\r\n                  <Row className=\"form-group \">\r\n                    <Col>\r\n                      <Label htmlFor=\"password\" className=\"ml-3\">\r\n                        Password:\r\n                      </Label>\r\n\r\n                      <Col md={10}>\r\n                        <Control.text\r\n                          model=\".password\"\r\n                          id=\"password\"\r\n                          name=\"password\"\r\n                          placeholder=\"password\"\r\n                          className=\"form-control\"\r\n                        />\r\n                      </Col>\r\n                    </Col>\r\n                  </Row>\r\n\r\n                  <Button type=\"submit\" value=\"submit\" color=\"primary\">\r\n                    Login\r\n                  </Button>\r\n                </Form> */}\r\n              </TabPane>\r\n              <TabPane tabId=\"2\">\r\n                <Register toggleModal={this.toggleModal} addUserInfo={this.props.addUserInfo}/>\r\n                {/* <Form\r\n                  model=\"profileForm\"\r\n                  onSubmit={(values) => this.handleRegister(values)}\r\n                  className=\"mt-2\"\r\n                >\r\n                  <Row className=\"form-group \">\r\n                    <Col>\r\n                      <Label htmlFor=\"profileName\" className=\"ml-3\">\r\n                        Profile Name:\r\n                      </Label>\r\n\r\n                      <Col md={10}>\r\n                        <Control.text\r\n                          model=\".profileName\"\r\n                          id=\"profileName\"\r\n                          name=\"profileName\"\r\n                          placeholder=\"profileName\"\r\n                          className=\"form-control\"\r\n                        />\r\n                      </Col>\r\n                    </Col>\r\n                  </Row>\r\n                  <Row className=\"form-group \">\r\n                    <Col>\r\n                      <Label htmlFor=\"email\" className=\"ml-3\">\r\n                        Email:\r\n                      </Label>\r\n\r\n                      <Col md={10}>\r\n                        <Control.text\r\n                          model=\".email\"\r\n                          id=\"email\"\r\n                          name=\"email\"\r\n                          placeholder=\"email\"\r\n                          className=\"form-control\"\r\n                        />\r\n                      </Col>\r\n                    </Col>\r\n                  </Row>\r\n                  <Row className=\"form-group \">\r\n                    <Col>\r\n                      <Label htmlFor=\"password\" className=\"ml-3\">\r\n                        Password:\r\n                      </Label>\r\n\r\n                      <Col md={10}>\r\n                        <Control.text\r\n                          model=\".password\"\r\n                          id=\"password\"\r\n                          name=\"password\"\r\n                          placeholder=\"password\"\r\n                          className=\"form-control\"\r\n                        />\r\n                      </Col>\r\n                    </Col>\r\n                  </Row>\r\n                  <Button type=\"submit\" value=\"submit\" color=\"primary\">\r\n                    Register\r\n                  </Button>\r\n                </Form> */}\r\n              </TabPane>\r\n            </TabContent>\r\n          </ModalBody>\r\n        </Modal>\r\n        {/* <Modal\r\n          isOpen={this.state.isPetIdModalOpen}\r\n          toggle={this.toggleModalPetId}\r\n        >\r\n          <ModalHeader\r\n            toggle={this.toggleModalPetId}\r\n            style={{\r\n              backgroundColor: \"#1b8eb1\",\r\n              color: \"white\",\r\n              textShadow: \"1px 1px 3px #363636\",\r\n            }}\r\n          >\r\n            Owner Id\r\n          </ModalHeader>\r\n          <ModalBody>{this.props.uniqueId.uniqueId}</ModalBody>\r\n        </Modal> */}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\nHeader.propTypes = {\r\n  logoutUser: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default connect(\r\n \"\",\r\n  { logoutUser }\r\n)(Header);\r\n",["135","136"],"C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\uniqueId.js",[],"C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\profileForm.js",[],"C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\components\\FeedComponent.js",["137","138","139"],"C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\ActionCreators.js",[],"C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\ActionTypes.js",[],"C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\firebase\\index.js",[],"C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\configureStore.js",["140"],"C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\userInfo.js",[],"C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\lostPetForm.js",[],"C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\components\\PublicProfile.js",["141","142"],"C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\components\\SheltersComponent.js",[],"C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\errorReducer.js",[],"C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\authReducer.js",[],"C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\components\\register.js",["143","144","145","146","147","148","149","150"],"import React, { Component } from \"react\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { registerUser } from \"../redux/ActionCreators\";\r\nimport classnames from \"classnames\";\r\nimport { Control, Form } from \"react-redux-form\";\r\nimport uuid from \"react-uuid\";\r\nimport {\r\n    Button,\r\n    Label,\r\n    Row,\r\n    Col,\r\n  } from \"reactstrap\";\r\nclass Register extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n        name : \"\",\r\n      email: \"\",\r\n      password: \"\",\r\n      password2: \"\",\r\n      errors: {}\r\n    };\r\n  }\r\n  generateId = () => {\r\n    this.props.addUniqueId(uuid());\r\n  };\r\n  componentDidMount() {\r\n    // If logged in and user navigates to Register page, should redirect them to dashboard\r\n    if (this.props.auth.isAuthenticated) {\r\n      this.props.history.push(\"/PetProfile\");\r\n      this.props.toggleModal()\r\n      alert(\"Already Loged In\")\r\n    }\r\n  }\r\ncomponentWillReceiveProps(nextProps) {\r\n    if (nextProps.errors) {\r\n      this.setState({\r\n        errors: nextProps.errors\r\n      });\r\n    }\r\n\r\n  }\r\nonChange = e => {\r\n    this.setState({ [e.target.id]: e.target.value });\r\n  };\r\nonSubmit = (e) => {\r\n    //e.preventDefault();\r\n     if( this.state.name !== \"\"){\r\n        this.setState({\r\n            errors: this.props.errors.name = null,\r\n          });\r\n    }\r\n     if(this.state.email != \"\"){\r\n        this.setState({\r\n\r\n            errors: this.props.errors.email = null,\r\n          });\r\n    }\r\n   if(this.state.password != \"\"){\r\n        this.setState({\r\n\r\n            errors: this.props.errors.password = null,\r\n          });\r\n    }\r\n   if(this.state.password2 != \"\"){\r\n        this.setState({\r\n            errors: this.props.errors.password2 = null,\r\n          });\r\n    } \r\nif (this.props.errors.name === null && this.props.errors.email === null &&this.props.errors.password === null && this.props.errors.password2 === null){\r\n    this.props.toggleModal()\r\n}\r\n    this.props.addUserInfo(\r\n  {profileName:this.state.name}\r\n      )\r\n\r\nconst newUser = {\r\n    name: this.state.name,\r\n      email: this.state.email,\r\n      password: this.state.password,\r\n      password2: this.state.password2\r\n    };\r\nthis.props.registerUser(newUser, this.props.history); \r\n  };\r\nrender() {\r\n    const { errors } = this.state;\r\nreturn (\r\n\r\n  <Form\r\n    model=\"profileForm\"\r\n    onSubmit={(values) => this.onSubmit(values)}\r\n    className=\"mt-2\"\r\n  >\r\n    <Row className=\"form-group \">\r\n      <Col>\r\n        <Label htmlFor=\"name\" className=\"ml-3\">\r\n          Profile Name:\r\n        </Label>\r\n        <Col md={10}>\r\n          <Control.text\r\n            model=\".name\"\r\n            id=\"name\"\r\n            name=\"name\"\r\n            placeholder=\"name\"\r\n            onChange={this.onChange}\r\n            value={this.state.name}\r\n            className={classnames(\"form-control\", {\r\n                invalid: errors.name\r\n               })}\r\n          />\r\n          <span className=\"text-danger m-1\">{errors.name}</span>\r\n        </Col>\r\n      </Col>\r\n    </Row>\r\n    <Row className=\"form-group \">\r\n      <Col>\r\n        <Label htmlFor=\"email\" className=\"ml-3\">\r\n          Email:\r\n        </Label>\r\n\r\n        <Col md={10}>\r\n          <Control.text\r\n            model=\".email\"\r\n            id=\"email\"\r\n            name=\"email\"\r\n            placeholder=\"email\"\r\n         \r\n            onChange={this.onChange}\r\n            value={this.state.email}\r\n            className={classnames(\"form-control\", {\r\n                invalid: errors.email\r\n               })}\r\n\r\n          />\r\n    <span className=\"text-danger m-1\">{errors.email}</span>\r\n        </Col>\r\n      </Col>\r\n    </Row>\r\n    <Row className=\"form-group \">\r\n      <Col>\r\n        <Label htmlFor=\"password\" className=\"ml-3\">\r\n          Password:\r\n        </Label>\r\n\r\n        <Col md={10}>\r\n          <Control.text\r\n            model=\".password\"\r\n            id=\"password\"\r\n            name=\"password\"\r\n            placeholder=\"password\"\r\n\r\n            onChange={this.onChange}\r\n            value={this.state.password}\r\n            error={errors.password}\r\n            className={classnames(\"form-control\", {\r\n                invalid: errors.password\r\n               })}\r\n          />\r\n          <span className=\"text-danger m-1\">{errors.password}</span>\r\n        </Col>\r\n      </Col>\r\n    </Row>\r\n    <Row className=\"form-group \">\r\n      <Col>\r\n        <Label htmlFor=\"password2\" className=\"ml-3\">\r\n          Comfirm Password:\r\n        </Label>\r\n\r\n        <Col md={10}>\r\n          <Control.text\r\n            model=\".password\"\r\n            id=\"password2\"\r\n            name=\"password2\"\r\n            placeholder=\"password2\"\r\n\r\n            onChange={this.onChange}\r\n            value={this.state.password2}\r\n            error={errors.password2}\r\n            className={classnames(\"form-control\", {\r\n            invalid: errors.password2\r\n           })}\r\n          />\r\n          <span className=\"text-danger m-1\">{errors.password2}</span>\r\n        </Col>\r\n      </Col>\r\n    </Row>\r\n\r\n    <Button type=\"submit\" value=\"submit\" color=\"primary\">\r\n      Register\r\n    </Button>\r\n  </Form>\r\n\r\n    );\r\n  }\r\n}\r\nRegister.propTypes = {\r\n  registerUser: PropTypes.func.isRequired,\r\n  auth: PropTypes.object.isRequired,\r\n  errors: PropTypes.object.isRequired\r\n};\r\nconst mapStateToProps = state => ({\r\n  auth: state.auth,\r\n  errors: state.errors\r\n});\r\nexport default connect(\r\n  mapStateToProps,\r\n  { registerUser }\r\n)(withRouter(Register));","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\utils\\setAuthToken.js",[],["151","152"],"C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\post.js",[],"C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\components\\MainComponent.js",["153","154"],"import React, { Component } from \"react\";\r\nimport {\r\n  Switch,\r\n  Route,\r\n  Redirect,\r\n  withRouter,\r\n  BrowserRouter,\r\n} from \"react-router-dom\";\r\n\r\n//import {ConfigureStore} from \"../redux/configureStore\";\r\n//import {store} from \"../redux/configureStore\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport Header from \"./HeaderComponent\";\r\nimport Feed from \"./FeedComponent\";\r\nimport PetProfile from \"./PetProfileComponent\";\r\nimport PublicProfile from \"./PublicProfile\";\r\nimport Shelters from \"./SheltersComponent\";\r\nimport Lostpet from \"./LostpetsComponent\";\r\n\r\nimport { actions } from \"react-redux-form\";\r\nimport {\r\n  addUniqueId,\r\n  postComment,\r\n  addUserInfo,\r\n  addPetCard,\r\n  logoutUser,\r\n  userPost,\r\n  addUserInfoDB,\r\n  updateUserInfoDB,\r\n  getUserInfoDB,\r\n  getUserPost\r\n} from \"../redux/ActionCreators\";\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    uniqueId: state.uniqueId,\r\n    post: state.post,\r\n    userInfo: state.userInfo,\r\n    petcard: state.petcard,\r\n    auth: state.auth,\r\n    postreducer: state.postreducer,\r\n    userinfodb: state.userinfodb,\r\n    errors: state.errors,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  addUniqueId: (uniqueId) => addUniqueId(uniqueId),\r\n  postComment: (postImage, text) => postComment(postImage, text),\r\n  addUserInfo: (\r\n    profileImage,\r\n    profileName,\r\n    firstName,\r\n    lastName,\r\n    email,\r\n    animalType,\r\n    breed,\r\n    mainColor,\r\n    secondaryColor\r\n  ) =>\r\n    addUserInfo(\r\n      profileImage,\r\n      profileName,\r\n      firstName,\r\n      lastName,\r\n      email,\r\n      animalType,\r\n      breed,\r\n      mainColor,\r\n      secondaryColor\r\n    ),\r\n  addPetCard: (petId, petcard, petImage) =>\r\n    addPetCard(petId, petcard, petImage),\r\n  logoutUser: () => logoutUser(),\r\n  userPost: (pic, body) => userPost(pic, body),\r\n\r\n  addUserInfoDB: (profileImage, firstName, lastName, about) =>\r\n    addUserInfoDB(profileImage, firstName, lastName, about),\r\n\r\n  updateUserInfoDB: (profileImage, firstName, lastName, about) =>\r\n    updateUserInfoDB(profileImage, firstName, lastName, about),\r\n    getUserInfoDB:()=>getUserInfoDB(),\r\n    getUserPost:()=>getUserPost(),\r\n  resetProfileForm: () => actions.reset(\"profileForm\"),\r\n  resetLostPetForm: () => actions.reset(\"lostPetForm\"),\r\n};\r\n\r\n\r\n\r\nclass Main extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n  }\r\n\r\n  \r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        {/* <Register/>\r\n        <Login/> */}\r\n        <Header\r\n          addUniqueId={this.props.addUniqueId}   //will be replaced with backend call\r\n          uniqueId={this.props.uniqueId}         //will be replaced with backend call\r\n          addUserInfo={this.props.addUserInfo}   // need to change info to addUserInfoDB\r\n          userInfo={this.props.userInfo}         // need to change info to getUserInfoDB\r\n          auth={this.props.auth}\r\n          logoutUser={this.props.loginUser}\r\n        />\r\n        <Switch>\r\n          <Route\r\n            exact\r\n            path=\"/\"\r\n            render={() => {\r\n              return this.props.userInfo.userInfo.profileName ? (\r\n                <Redirect to=\"/PetProfile\" />\r\n              ) : (\r\n                <Redirect to=\"/petbook\" />\r\n              );\r\n            }}\r\n          />\r\n\r\n          <Route\r\n            path=\"/PetProfile\"\r\n            render={() => (\r\n              <PetProfile\r\n                //postComment={this.props.postComment}  Take out\r\n                petcard={this.props.petcard}            //will be replaced with backend call\r\n                uniqueId={this.props.uniqueId}          //will be replaced with backend call\r\n                addPetCard={this.props.addPetCard}      //will be replaced with backend call\r\n                addUserInfo={this.props.addUserInfo}    // need to change info to addUserInfoDB\r\n                userInfo={this.props.userInfo}          // need to change info to getUserInfoDB\r\n                auth={this.props.auth}\r\n                userinfodb={this.props.userinfodb}\r\n                addUserInfoDB={this.props.addUserInfoDB}\r\n                updateUserInfoDB={this.props.updateUserInfoDB}\r\n                getUserInfoDB={this.props.getUserInfoDB}\r\n                getUserPost={this.props.getUserPost}\r\n              />\r\n            )}\r\n          />\r\n          <Route\r\n            path=\"/PublicProfile\"\r\n            render={() => (\r\n              <PublicProfile\r\n                post={this.props.post}                         //will be replaced with backend call\r\n                uniqueId={this.props.uniqueId}                 //will be replaced with backend call\r\n                addUserInfo={this.props.addUserInfo}           // need to change info to addUserInfoDB\r\n                resetProfileForm={this.props.resetProfileForm}\r\n                petcard={this.props.petcard}                   //will be replaced with backend call\r\n                addPetCard={this.props.addPetCard}             //will be replaced with backend call\r\n                userInfo={this.props.userInfo}                 // need to change info to getUserInfoDB\r\n                auth={this.props.auth}\r\n                userinfodb={this.props.userinfodb}\r\n                getUserInfoDB={this.props.getUserInfoDB}\r\n                getUserPost={this.props.getUserPost}\r\n                postreducer={this.props.postreducer}\r\n              />\r\n            )}\r\n          />\r\n          <Route path=\"/Shelters\">\r\n            <Shelters />\r\n          </Route>\r\n          <Route\r\n            path=\"/LostPets\"\r\n            render={() => (\r\n              <Lostpet\r\n                addUniqueId={this.props.addUniqueId}             //will be replaced with backend call\r\n                resetLostPetForm={this.props.resetLostPetForm}\r\n                petcard={this.props.petcard}                     //will be replaced with backend call\r\n                uniqueId={this.props.uniqueId}                   //will be replaced with backend call\r\n                addUserInfo={this.props.addUserInfo}             // need to change info to addUserInfoDB\r\n                userInfo={this.props.userInfo}                   // need to change info to getUserInfoDB\r\n                auth={this.props.auth}\r\n              />\r\n            )}\r\n          />\r\n          <Route\r\n            path=\"/Feed\"\r\n            render={() => (\r\n              <Feed\r\n                addUniqueId={this.props.addUniqueId}             //will be replaced with backend call\r\n                postComment={this.props.postComment}             \r\n                post={this.props.post}                            //will be replaced with postreducer\r\n                userInfo={this.props.userInfo}                     // need to change info to getUserInfoDB\r\n                uniqueId={this.props.uniqueId}                    //will be replaced with backend call\r\n                addUserInfo={this.props.addUserInfo}                // need to change info to addUserInfoDB\r\n                auth={this.props.auth}\r\n                addAuthUserInfo={this.props.addAuthUserInfo}\r\n                userPost={this.props.userPost}                      //?????\r\n                postreducer={this.props.postreducer}\r\n                userinfodb={this.props.userinfodb}\r\n                getUserInfoDB={this.props.getUserInfoDB}\r\n                \r\n              />\r\n            )}\r\n          />\r\n          <Route\r\n            path=\"/petbook\"\r\n            render={() => (\r\n              <Lostpet\r\n                addUniqueId={this.props.addUniqueId}                //will be replaced with backend call\r\n                resetLostPetForm={this.props.resetLostPetForm}\r\n                petcard={this.props.petcard}                      //will be replaced with backend call\r\n                uniqueId={this.props.uniqueId}                    //will be replaced with backend call\r\n                addUserInfo={this.props.addUserInfo}             // need to change info to addUserInfoDB\r\n                userInfo={this.props.userInfo}                    // need to change info to getUserInfoDB\r\n                auth={this.props.auth}\r\n              />\r\n            )}\r\n          />\r\n\r\n          {/* <Redirect to=\"/LostPets\" /> */}\r\n        </Switch>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Main));\r\n","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\components\\LostpetsComponent.js",["155","156","157"],"C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\components\\PetProfileComponent.js",["158","159","160","161","162","163","164","165","166","167","168","169","170"],"C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\App.js",["171"],"import React from \"react\";\nimport \"./App.css\";\nimport Main from \"./components/MainComponent\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport { ConfigureStore } from \"./redux/configureStore\";\nimport { setCurrentUser,logoutUser } from \"./redux/ActionCreators\";\nimport setAuthToken from \"./utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\n\nconst store = ConfigureStore();\n\nif (localStorage.jwtToken) {\n  // Set auth token header auth\n  const token = localStorage.jwtToken;\n  setAuthToken(token);\n  // Decode token and get user info and exp\n  const decoded = jwt_decode(token);\n  // Set user and isAuthenticated\n  store.dispatch(setCurrentUser(decoded));\n// Check for expired token\n  const currentTime = Date.now() / 1000; // to get in milliseconds\n  if (decoded.exp < currentTime) {\n    // Logout user\n    store.dispatch(logoutUser());\n    // Redirect to login\n    window.location.href = \"./login\";\n  }\n}\nfunction App() {\n  return (\n    <Provider store={store}>\n      <BrowserRouter basename=\"/petbook\" >\n        <div className=\"App\">\n          <Main />\n        </div>\n      </BrowserRouter>\n    </Provider>\n  );\n}\n\nexport default App;\n","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\components\\login.js",["172","173","174","175"],"import React, { Component } from \"react\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { loginUser } from \"../redux/ActionCreators\";\r\nimport classnames from \"classnames\";\r\nimport { Control, Form } from \"react-redux-form\";\r\nimport {\r\n    Button,\r\n    Label,\r\n    Row,\r\n    Col,\r\n  } from \"reactstrap\";\r\nclass Login extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      email: \"\",\r\n      password: \"\",\r\n      errors: {}\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    //If logged in and user navigates to Login page, should redirect them to dashboard\r\n    // if (this.props.auth.isAuthenticated) {\r\n    //   this.props.history.push(\"/petbook\");\r\n    //   this.props.toggleModal()\r\n    //   alert(\"Already Loged In\")\r\n    // }\r\n  }\r\ncomponentWillReceiveProps(nextProps) {\r\n    if (nextProps.auth.isAuthenticated) {\r\n      //this.props.history.push(\"/Feed\"); // push user to dashboard when they login\r\n      this.props.toggleModal()\r\n    }\r\nif (nextProps.errors) {\r\n      this.setState({\r\n        errors: nextProps.errors\r\n      });\r\n    }\r\n  }\r\nonChange = e => {\r\n    this.setState({ [e.target.id]: e.target.value });\r\n  };\r\nonSubmit = e => {\r\n    //e.preventDefault();\r\n  \r\n  //    if(this.state.email != \"\"){\r\n  //       this.setState({\r\n\r\n  //           errors: this.props.errors.email = null\r\n  //         });\r\n  //   }\r\n  //  if(this.state.password != \"\"){\r\n  //       this.setState({\r\n\r\n  //           errors: this.props.errors.password = null,\r\n  //         });\r\n  //   }\r\n// if (this.props.auth.isAuthenticated === true){\r\n//   this.props.toggleModal()\r\n// }\r\n\r\nconst userData = {\r\n      email: this.state.email,\r\n      password: this.state.password\r\n    };\r\nthis.props.loginUser(userData); // since we handle the redirect within our component, we don't need to pass in this.props.history as a parameter\r\n  };\r\nrender() {\r\n    const { errors } = this.state;\r\nreturn (\r\n\r\n    <Form\r\n    model=\"profileForm\"\r\n    onSubmit={(values) => this.onSubmit(values)}\r\n    className=\"mt-2\"\r\n  >\r\n   \r\n    <Row className=\"form-group \">\r\n      <Col>\r\n        <Label htmlFor=\"email\" className=\"ml-3\">\r\n          Email:\r\n        </Label>\r\n\r\n        <Col md={10}>\r\n          <Control.text\r\n            model=\".email\"\r\n            id=\"email\"\r\n            name=\"email\"\r\n            placeholder=\"email\"\r\n         \r\n            onChange={this.onChange}\r\n            value={this.state.email}\r\n            className={classnames(\"form-control\", {\r\n              invalid: errors.email\r\n               })}\r\n\r\n          />\r\n    <span className=\"text-danger m-1\">{errors.email}</span>\r\n        </Col>\r\n      </Col>\r\n    </Row>\r\n    <Row className=\"form-group \">\r\n      <Col>\r\n        <Label htmlFor=\"password\" className=\"ml-3\">\r\n          Password:\r\n        </Label>\r\n\r\n        <Col md={10}>\r\n          <Control.text\r\n            model=\".password\"\r\n            id=\"password\"\r\n            name=\"password\"\r\n            placeholder=\"password\"\r\n\r\n            onChange={this.onChange}\r\n            value={this.state.password}\r\n            error={errors.password}\r\n            className={classnames(\"form-control\", {\r\n              invalid: errors.password || errors.passwordincorrect\r\n               })}\r\n          />\r\n          <span className=\"text-danger m-1\">{errors.password}\r\n                   {errors.passwordincorrect}</span>\r\n        </Col>\r\n      </Col>\r\n    </Row>\r\n       <Button type=\"submit\" value=\"submit\" color=\"primary\">\r\n      Login\r\n    </Button>\r\n  </Form>\r\n    );\r\n  }\r\n}\r\nLogin.propTypes = {\r\n  loginUser: PropTypes.func.isRequired,\r\n  auth: PropTypes.object.isRequired,\r\n  errors: PropTypes.object.isRequired\r\n};\r\nconst mapStateToProps = state => ({\r\n  auth: state.auth,\r\n  errors: state.errors\r\n});\r\nexport default connect(\r\n  mapStateToProps,\r\n  { loginUser }\r\n)(Login);","C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\petCard.js",[],"C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\petForm.js",[],"C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\postReducer.js",["176","177"],"C:\\Users\\keith\\Desktop\\Personal-Project\\petbook\\client\\src\\redux\\userInfoDBReducer.js",["178"],"import {\r\n    ADD_USER_INFODB,\r\n    UPDATE_USER_INFODB,\r\n    GET_USER_INFODB\r\n  } from \"./ActionTypes\";\r\n  const isEmpty = require(\"is-empty\");\r\n\r\n  export const userInfoDBReducer = (state = { userInfodb: [] }, action)=> {\r\n    switch (action.type) {\r\n        case ADD_USER_INFODB:\r\n            return {\r\n              ...state,\r\n              userInfodb:action.payload.data\r\n\r\n            };\r\n            case UPDATE_USER_INFODB:\r\n              return {\r\n                ...state,\r\n                userInfodb:action.payload.data\r\n\r\n              };\r\n              case GET_USER_INFODB:\r\n              return {\r\n                ...state,\r\n                userInfodb:action.payload.data\r\n\r\n              };\r\n          default:\r\n            return state;      \r\n    }\r\n  }",{"ruleId":"179","replacedBy":"180"},{"ruleId":"181","replacedBy":"182"},{"ruleId":"179","replacedBy":"183"},{"ruleId":"181","replacedBy":"184"},{"ruleId":"185","severity":1,"message":"186","line":11,"column":3,"nodeType":"187","messageId":"188","endLine":11,"endColumn":8},{"ruleId":"185","severity":1,"message":"189","line":25,"column":3,"nodeType":"187","messageId":"188","endLine":25,"endColumn":6},{"ruleId":"185","severity":1,"message":"190","line":26,"column":3,"nodeType":"187","messageId":"188","endLine":26,"endColumn":6},{"ruleId":"185","severity":1,"message":"191","line":30,"column":10,"nodeType":"187","messageId":"188","endLine":30,"endColumn":17},{"ruleId":"185","severity":1,"message":"192","line":30,"column":19,"nodeType":"187","messageId":"188","endLine":30,"endColumn":23},{"ruleId":"185","severity":1,"message":"193","line":30,"column":25,"nodeType":"187","messageId":"188","endLine":30,"endColumn":31},{"ruleId":"194","severity":1,"message":"195","line":131,"column":15,"nodeType":"196","endLine":134,"endColumn":16},{"ruleId":"179","replacedBy":"197"},{"ruleId":"181","replacedBy":"198"},{"ruleId":"199","severity":1,"message":"200","line":142,"column":17,"nodeType":"196","endLine":153,"endColumn":19},{"ruleId":"199","severity":1,"message":"201","line":157,"column":19,"nodeType":"196","endLine":164,"endColumn":21},{"ruleId":"185","severity":1,"message":"202","line":178,"column":7,"nodeType":"187","messageId":"188","endLine":178,"endColumn":14},{"ruleId":"185","severity":1,"message":"203","line":15,"column":7,"nodeType":"187","messageId":"188","endLine":15,"endColumn":19},{"ruleId":"185","severity":1,"message":"204","line":13,"column":7,"nodeType":"187","messageId":"188","endLine":13,"endColumn":15},{"ruleId":"205","severity":1,"message":"206","line":293,"column":13,"nodeType":"196","endLine":298,"endColumn":14},{"ruleId":"185","severity":1,"message":"207","line":2,"column":10,"nodeType":"187","messageId":"188","endLine":2,"endColumn":14},{"ruleId":"208","severity":1,"message":"209","line":55,"column":26,"nodeType":"210","messageId":"211","endLine":55,"endColumn":28},{"ruleId":"208","severity":1,"message":"209","line":61,"column":27,"nodeType":"210","messageId":"211","endLine":61,"endColumn":29},{"ruleId":"208","severity":1,"message":"209","line":67,"column":28,"nodeType":"210","messageId":"211","endLine":67,"endColumn":30},{"ruleId":"199","severity":1,"message":"212","line":102,"column":11,"nodeType":"196","endLine":112,"endColumn":13},{"ruleId":"199","severity":1,"message":"212","line":124,"column":11,"nodeType":"196","endLine":136,"endColumn":13},{"ruleId":"199","severity":1,"message":"212","line":148,"column":11,"nodeType":"196","endLine":160,"endColumn":13},{"ruleId":"199","severity":1,"message":"212","line":172,"column":11,"nodeType":"196","endLine":184,"endColumn":13},{"ruleId":"179","replacedBy":"213"},{"ruleId":"181","replacedBy":"214"},{"ruleId":"185","severity":1,"message":"215","line":7,"column":3,"nodeType":"187","messageId":"188","endLine":7,"endColumn":16},{"ruleId":"216","severity":1,"message":"217","line":93,"column":3,"nodeType":"218","messageId":"219","endLine":96,"endColumn":4},{"ruleId":"185","severity":1,"message":"220","line":28,"column":7,"nodeType":"187","messageId":"188","endLine":28,"endColumn":21},{"ruleId":"199","severity":1,"message":"212","line":173,"column":21,"nodeType":"196","endLine":180,"endColumn":23},{"ruleId":"199","severity":1,"message":"212","line":195,"column":21,"nodeType":"196","endLine":202,"endColumn":23},{"ruleId":"199","severity":1,"message":"212","line":310,"column":19,"nodeType":"196","endLine":317,"endColumn":21},{"ruleId":"199","severity":1,"message":"201","line":332,"column":19,"nodeType":"196","endLine":340,"endColumn":21},{"ruleId":"199","severity":1,"message":"212","line":354,"column":19,"nodeType":"196","endLine":361,"endColumn":21},{"ruleId":"199","severity":1,"message":"212","line":376,"column":19,"nodeType":"196","endLine":383,"endColumn":21},{"ruleId":"199","severity":1,"message":"212","line":398,"column":19,"nodeType":"196","endLine":405,"endColumn":21},{"ruleId":"199","severity":1,"message":"212","line":420,"column":19,"nodeType":"196","endLine":427,"endColumn":21},{"ruleId":"199","severity":1,"message":"200","line":441,"column":19,"nodeType":"196","endLine":449,"endColumn":21},{"ruleId":"199","severity":1,"message":"201","line":606,"column":15,"nodeType":"196","endLine":614,"endColumn":17},{"ruleId":"199","severity":1,"message":"212","line":628,"column":15,"nodeType":"196","endLine":639,"endColumn":17},{"ruleId":"199","severity":1,"message":"212","line":653,"column":15,"nodeType":"196","endLine":660,"endColumn":17},{"ruleId":"199","severity":1,"message":"212","line":675,"column":15,"nodeType":"196","endLine":682,"endColumn":17},{"ruleId":"199","severity":1,"message":"212","line":696,"column":15,"nodeType":"196","endLine":707,"endColumn":17},{"ruleId":"199","severity":1,"message":"200","line":721,"column":15,"nodeType":"196","endLine":729,"endColumn":17},{"ruleId":"185","severity":1,"message":"221","line":10,"column":10,"nodeType":"187","messageId":"188","endLine":10,"endColumn":21},{"ruleId":"185","severity":1,"message":"207","line":2,"column":10,"nodeType":"187","messageId":"188","endLine":2,"endColumn":14},{"ruleId":"185","severity":1,"message":"222","line":2,"column":16,"nodeType":"187","messageId":"188","endLine":2,"endColumn":26},{"ruleId":"199","severity":1,"message":"212","line":87,"column":11,"nodeType":"196","endLine":99,"endColumn":13},{"ruleId":"199","severity":1,"message":"212","line":111,"column":11,"nodeType":"196","endLine":123,"endColumn":13},{"ruleId":"185","severity":1,"message":"223","line":5,"column":9,"nodeType":"187","messageId":"188","endLine":5,"endColumn":16},{"ruleId":"185","severity":1,"message":"203","line":6,"column":9,"nodeType":"187","messageId":"188","endLine":6,"endColumn":21},{"ruleId":"185","severity":1,"message":"223","line":6,"column":9,"nodeType":"187","messageId":"188","endLine":6,"endColumn":16},"no-native-reassign",["224"],"no-negated-in-lhs",["225"],["224"],["225"],"no-unused-vars","'Label' is defined but never used.","Identifier","unusedVar","'Row' is defined but never used.","'Col' is defined but never used.","'Control' is defined but never used.","'Form' is defined but never used.","'Errors' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["224"],["225"],"react/jsx-pascal-case","Imported JSX component textarea must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component file must be in PascalCase or SCREAMING_SNAKE_CASE","'apiPser' is assigned a value but never used.","'initialState' is assigned a value but never used.","'apiPosts' is assigned a value but never used.","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","'Link' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Imported JSX component text must be in PascalCase or SCREAMING_SNAKE_CASE",["224"],["225"],"'BrowserRouter' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'apiUserInfoDBs' is assigned a value but never used.","'PersistGate' is defined but never used.","'withRouter' is defined but never used.","'isEmpty' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]